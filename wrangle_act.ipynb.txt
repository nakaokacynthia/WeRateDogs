{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "extensions": {
     "jupyter_dashboards": {
      "version": 1,
      "views": {
       "grid_default": {
        "col": 0,
        "height": 4,
        "hidden": false,
        "row": 0,
        "width": 4
       },
       "report_default": {
        "hidden": false
       }
      }
     }
    }
   },
   "source": [
    "# Project: Wrangling and Analyze Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from twython import Twython\n",
    "import requests\n",
    "import json\n",
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from wordcloud import WordCloud, STOPWORDS\n",
    "from PIL import Image\n",
    "import urllib\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Gathering\n",
    "In the cells below was gathered **all** three pieces of data for this project and loaded them in the notebook. \n",
    "1. Directly download the WeRateDogs Twitter archive data (twitter_archive_enhanced.csv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "extensions": {
     "jupyter_dashboards": {
      "version": 1,
      "views": {
       "grid_default": {
        "hidden": true
       },
       "report_default": {
        "hidden": true
       }
      }
     }
    }
   },
   "outputs": [],
   "source": [
    "# Supplied file\n",
    "archive = pd.read_csv('twitter-archive-enhanced.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Use the Requests library to download the tweet image prediction (image_predictions.tsv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Requesting tweet image predictions\n",
    "\n",
    "with open('image_predictions.tsv' , 'wb') as file:\n",
    "    image_predictions = requests.get('https://d17h27t6h515a5.cloudfront.net/topher/2017/August/599fd2ad_image-predictions/image-predictions.tsv', auth=('user', 'pass'))\n",
    "    file.write(image_predictions.content)\n",
    "    \n",
    "# Reading image predictions\n",
    "predictions = pd.read_csv('image_predictions.tsv', sep='\\t')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Use the Tweepy library to query additional data via the Twitter API (tweet_json.txt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Use Python's Tweepy library and store each tweet's entire set of JSON data in a file called tweet_json.txt file.\n",
    "import tweepy\n",
    "\n",
    "consumer_key = '--'\n",
    "consumer_secret = '--'\n",
    "access_token = '----'\n",
    "access_secret = '--'\n",
    "\n",
    "auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n",
    "auth.set_access_token(access_token, access_secret)\n",
    "\n",
    "api = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Rate limit reached. Sleeping for: 622\n",
      "Rate limit reached. Sleeping for: 625\n"
     ]
    }
   ],
   "source": [
    "collected =[]\n",
    "not_collected = [] \n",
    "\n",
    "with open('tweet_json.txt', 'w') as file:\n",
    "    for tweet_id in list(archive['tweet_id']):\n",
    "        try:\n",
    "            tweet_status = api.get_status(tweet_id,tweet_mode='extended')\n",
    "            json.dump(tweet_status._json, file)\n",
    "            file.write('\\n')\n",
    "            collected.append(tweet_id)\n",
    "        except Exception as e:\n",
    "            not_collected.append(tweet_id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Reading JSON content as pandas dataframe\n",
    "tweets = pd.read_json('tweet_json.txt', lines = True,encoding='utf-8')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "extensions": {
     "jupyter_dashboards": {
      "version": 1,
      "views": {
       "grid_default": {
        "col": 4,
        "height": 4,
        "hidden": false,
        "row": 28,
        "width": 4
       },
       "report_default": {
        "hidden": false
       }
      }
     }
    }
   },
   "source": [
    "## Assessing Data\n",
    "In this section was detect and documented **nine (9) quality issues and five (5) tidiness issues**. Were use **both** visual assessment programmatic assessement to assess the data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>retweeted_status_user_id</th>\n",
       "      <th>retweeted_status_timestamp</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-01 16:23:56 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892420643...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-01 00:17:27 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892177421...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-31 00:18:03 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891815181...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Archie</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-30 15:58:51 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891689557...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Darla</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-29 16:00:24 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891327558...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id  in_reply_to_status_id  in_reply_to_user_id  \\\n",
       "0  892420643555336193                    NaN                  NaN   \n",
       "1  892177421306343426                    NaN                  NaN   \n",
       "2  891815181378084864                    NaN                  NaN   \n",
       "3  891689557279858688                    NaN                  NaN   \n",
       "4  891327558926688256                    NaN                  NaN   \n",
       "\n",
       "                   timestamp  \\\n",
       "0  2017-08-01 16:23:56 +0000   \n",
       "1  2017-08-01 00:17:27 +0000   \n",
       "2  2017-07-31 00:18:03 +0000   \n",
       "3  2017-07-30 15:58:51 +0000   \n",
       "4  2017-07-29 16:00:24 +0000   \n",
       "\n",
       "                                              source  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "1  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "3  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "4  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                text  retweeted_status_id  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                  NaN   \n",
       "1  This is Tilly. She's just checking pup on you....                  NaN   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...                  NaN   \n",
       "3  This is Darla. She commenced a snooze mid meal...                  NaN   \n",
       "4  This is Franklin. He would like you to stop ca...                  NaN   \n",
       "\n",
       "   retweeted_status_user_id retweeted_status_timestamp  \\\n",
       "0                       NaN                        NaN   \n",
       "1                       NaN                        NaN   \n",
       "2                       NaN                        NaN   \n",
       "3                       NaN                        NaN   \n",
       "4                       NaN                        NaN   \n",
       "\n",
       "                                       expanded_urls  rating_numerator  \\\n",
       "0  https://twitter.com/dog_rates/status/892420643...                13   \n",
       "1  https://twitter.com/dog_rates/status/892177421...                13   \n",
       "2  https://twitter.com/dog_rates/status/891815181...                12   \n",
       "3  https://twitter.com/dog_rates/status/891689557...                13   \n",
       "4  https://twitter.com/dog_rates/status/891327558...                12   \n",
       "\n",
       "   rating_denominator      name doggo floofer pupper puppo  \n",
       "0                  10   Phineas  None    None   None  None  \n",
       "1                  10     Tilly  None    None   None  None  \n",
       "2                  10    Archie  None    None   None  None  \n",
       "3                  10     Darla  None    None   None  None  \n",
       "4                  10  Franklin  None    None   None  None  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the data gathered data files\n",
    "archive.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>retweeted_status_user_id</th>\n",
       "      <th>retweeted_status_timestamp</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2351</th>\n",
       "      <td>666049248165822465</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-11-16 00:24:50 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Here we have a 1949 1st generation vulpix. Enj...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/666049248...</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2352</th>\n",
       "      <td>666044226329800704</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-11-16 00:04:52 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is a purebred Piers Morgan. Loves to Netf...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/666044226...</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>a</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2353</th>\n",
       "      <td>666033412701032449</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-11-15 23:21:54 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Here is a very happy pup. Big fan of well-main...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/666033412...</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>a</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2354</th>\n",
       "      <td>666029285002620928</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-11-15 23:05:30 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is a western brown Mitsubishi terrier. Up...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/666029285...</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>a</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2355</th>\n",
       "      <td>666020888022790149</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-11-15 22:32:08 +0000</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Here we have a Japanese Irish Setter. Lost eye...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://twitter.com/dog_rates/status/666020888...</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                tweet_id  in_reply_to_status_id  in_reply_to_user_id  \\\n",
       "2351  666049248165822465                    NaN                  NaN   \n",
       "2352  666044226329800704                    NaN                  NaN   \n",
       "2353  666033412701032449                    NaN                  NaN   \n",
       "2354  666029285002620928                    NaN                  NaN   \n",
       "2355  666020888022790149                    NaN                  NaN   \n",
       "\n",
       "                      timestamp  \\\n",
       "2351  2015-11-16 00:24:50 +0000   \n",
       "2352  2015-11-16 00:04:52 +0000   \n",
       "2353  2015-11-15 23:21:54 +0000   \n",
       "2354  2015-11-15 23:05:30 +0000   \n",
       "2355  2015-11-15 22:32:08 +0000   \n",
       "\n",
       "                                                 source  \\\n",
       "2351  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2352  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2353  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2354  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2355  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                   text  retweeted_status_id  \\\n",
       "2351  Here we have a 1949 1st generation vulpix. Enj...                  NaN   \n",
       "2352  This is a purebred Piers Morgan. Loves to Netf...                  NaN   \n",
       "2353  Here is a very happy pup. Big fan of well-main...                  NaN   \n",
       "2354  This is a western brown Mitsubishi terrier. Up...                  NaN   \n",
       "2355  Here we have a Japanese Irish Setter. Lost eye...                  NaN   \n",
       "\n",
       "      retweeted_status_user_id retweeted_status_timestamp  \\\n",
       "2351                       NaN                        NaN   \n",
       "2352                       NaN                        NaN   \n",
       "2353                       NaN                        NaN   \n",
       "2354                       NaN                        NaN   \n",
       "2355                       NaN                        NaN   \n",
       "\n",
       "                                          expanded_urls  rating_numerator  \\\n",
       "2351  https://twitter.com/dog_rates/status/666049248...                 5   \n",
       "2352  https://twitter.com/dog_rates/status/666044226...                 6   \n",
       "2353  https://twitter.com/dog_rates/status/666033412...                 9   \n",
       "2354  https://twitter.com/dog_rates/status/666029285...                 7   \n",
       "2355  https://twitter.com/dog_rates/status/666020888...                 8   \n",
       "\n",
       "      rating_denominator  name doggo floofer pupper puppo  \n",
       "2351                  10  None  None    None   None  None  \n",
       "2352                  10     a  None    None   None  None  \n",
       "2353                  10     a  None    None   None  None  \n",
       "2354                  10     a  None    None   None  None  \n",
       "2355                  10  None  None    None   None  None  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "archive.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2356, 17)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "archive.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2356 entries, 0 to 2355\n",
      "Data columns (total 17 columns):\n",
      " #   Column                      Non-Null Count  Dtype  \n",
      "---  ------                      --------------  -----  \n",
      " 0   tweet_id                    2356 non-null   int64  \n",
      " 1   in_reply_to_status_id       78 non-null     float64\n",
      " 2   in_reply_to_user_id         78 non-null     float64\n",
      " 3   timestamp                   2356 non-null   object \n",
      " 4   source                      2356 non-null   object \n",
      " 5   text                        2356 non-null   object \n",
      " 6   retweeted_status_id         181 non-null    float64\n",
      " 7   retweeted_status_user_id    181 non-null    float64\n",
      " 8   retweeted_status_timestamp  181 non-null    object \n",
      " 9   expanded_urls               2297 non-null   object \n",
      " 10  rating_numerator            2356 non-null   int64  \n",
      " 11  rating_denominator          2356 non-null   int64  \n",
      " 12  name                        2356 non-null   object \n",
      " 13  doggo                       2356 non-null   object \n",
      " 14  floofer                     2356 non-null   object \n",
      " 15  pupper                      2356 non-null   object \n",
      " 16  puppo                       2356 non-null   object \n",
      "dtypes: float64(4), int64(3), object(10)\n",
      "memory usage: 313.0+ KB\n"
     ]
    }
   ],
   "source": [
    "archive.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>retweeted_status_id</th>\n",
       "      <th>retweeted_status_user_id</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.356000e+03</td>\n",
       "      <td>7.800000e+01</td>\n",
       "      <td>7.800000e+01</td>\n",
       "      <td>1.810000e+02</td>\n",
       "      <td>1.810000e+02</td>\n",
       "      <td>2356.000000</td>\n",
       "      <td>2356.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.427716e+17</td>\n",
       "      <td>7.455079e+17</td>\n",
       "      <td>2.014171e+16</td>\n",
       "      <td>7.720400e+17</td>\n",
       "      <td>1.241698e+16</td>\n",
       "      <td>13.126486</td>\n",
       "      <td>10.455433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.856705e+16</td>\n",
       "      <td>7.582492e+16</td>\n",
       "      <td>1.252797e+17</td>\n",
       "      <td>6.236928e+16</td>\n",
       "      <td>9.599254e+16</td>\n",
       "      <td>45.876648</td>\n",
       "      <td>6.745237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>6.660209e+17</td>\n",
       "      <td>6.658147e+17</td>\n",
       "      <td>1.185634e+07</td>\n",
       "      <td>6.661041e+17</td>\n",
       "      <td>7.832140e+05</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.783989e+17</td>\n",
       "      <td>6.757419e+17</td>\n",
       "      <td>3.086374e+08</td>\n",
       "      <td>7.186315e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.196279e+17</td>\n",
       "      <td>7.038708e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>7.804657e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.993373e+17</td>\n",
       "      <td>8.257804e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>8.203146e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8.924206e+17</td>\n",
       "      <td>8.862664e+17</td>\n",
       "      <td>8.405479e+17</td>\n",
       "      <td>8.874740e+17</td>\n",
       "      <td>7.874618e+17</td>\n",
       "      <td>1776.000000</td>\n",
       "      <td>170.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           tweet_id  in_reply_to_status_id  in_reply_to_user_id  \\\n",
       "count  2.356000e+03           7.800000e+01         7.800000e+01   \n",
       "mean   7.427716e+17           7.455079e+17         2.014171e+16   \n",
       "std    6.856705e+16           7.582492e+16         1.252797e+17   \n",
       "min    6.660209e+17           6.658147e+17         1.185634e+07   \n",
       "25%    6.783989e+17           6.757419e+17         3.086374e+08   \n",
       "50%    7.196279e+17           7.038708e+17         4.196984e+09   \n",
       "75%    7.993373e+17           8.257804e+17         4.196984e+09   \n",
       "max    8.924206e+17           8.862664e+17         8.405479e+17   \n",
       "\n",
       "       retweeted_status_id  retweeted_status_user_id  rating_numerator  \\\n",
       "count         1.810000e+02              1.810000e+02       2356.000000   \n",
       "mean          7.720400e+17              1.241698e+16         13.126486   \n",
       "std           6.236928e+16              9.599254e+16         45.876648   \n",
       "min           6.661041e+17              7.832140e+05          0.000000   \n",
       "25%           7.186315e+17              4.196984e+09         10.000000   \n",
       "50%           7.804657e+17              4.196984e+09         11.000000   \n",
       "75%           8.203146e+17              4.196984e+09         12.000000   \n",
       "max           8.874740e+17              7.874618e+17       1776.000000   \n",
       "\n",
       "       rating_denominator  \n",
       "count         2356.000000  \n",
       "mean            10.455433  \n",
       "std              6.745237  \n",
       "min              0.000000  \n",
       "25%             10.000000  \n",
       "50%             10.000000  \n",
       "75%             10.000000  \n",
       "max            170.000000  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "archive.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>jpg_url</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p1_dog</th>\n",
       "      <th>p2</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p2_dog</th>\n",
       "      <th>p3</th>\n",
       "      <th>p3_conf</th>\n",
       "      <th>p3_dog</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>666020888022790149</td>\n",
       "      <td>https://pbs.twimg.com/media/CT4udn0WwAA0aMy.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>Welsh_springer_spaniel</td>\n",
       "      <td>0.465074</td>\n",
       "      <td>True</td>\n",
       "      <td>collie</td>\n",
       "      <td>0.156665</td>\n",
       "      <td>True</td>\n",
       "      <td>Shetland_sheepdog</td>\n",
       "      <td>0.061428</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>666029285002620928</td>\n",
       "      <td>https://pbs.twimg.com/media/CT42GRgUYAA5iDo.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>redbone</td>\n",
       "      <td>0.506826</td>\n",
       "      <td>True</td>\n",
       "      <td>miniature_pinscher</td>\n",
       "      <td>0.074192</td>\n",
       "      <td>True</td>\n",
       "      <td>Rhodesian_ridgeback</td>\n",
       "      <td>0.072010</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>666033412701032449</td>\n",
       "      <td>https://pbs.twimg.com/media/CT4521TWwAEvMyu.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>German_shepherd</td>\n",
       "      <td>0.596461</td>\n",
       "      <td>True</td>\n",
       "      <td>malinois</td>\n",
       "      <td>0.138584</td>\n",
       "      <td>True</td>\n",
       "      <td>bloodhound</td>\n",
       "      <td>0.116197</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>666044226329800704</td>\n",
       "      <td>https://pbs.twimg.com/media/CT5Dr8HUEAA-lEu.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>Rhodesian_ridgeback</td>\n",
       "      <td>0.408143</td>\n",
       "      <td>True</td>\n",
       "      <td>redbone</td>\n",
       "      <td>0.360687</td>\n",
       "      <td>True</td>\n",
       "      <td>miniature_pinscher</td>\n",
       "      <td>0.222752</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>666049248165822465</td>\n",
       "      <td>https://pbs.twimg.com/media/CT5IQmsXIAAKY4A.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>miniature_pinscher</td>\n",
       "      <td>0.560311</td>\n",
       "      <td>True</td>\n",
       "      <td>Rottweiler</td>\n",
       "      <td>0.243682</td>\n",
       "      <td>True</td>\n",
       "      <td>Doberman</td>\n",
       "      <td>0.154629</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id                                          jpg_url  \\\n",
       "0  666020888022790149  https://pbs.twimg.com/media/CT4udn0WwAA0aMy.jpg   \n",
       "1  666029285002620928  https://pbs.twimg.com/media/CT42GRgUYAA5iDo.jpg   \n",
       "2  666033412701032449  https://pbs.twimg.com/media/CT4521TWwAEvMyu.jpg   \n",
       "3  666044226329800704  https://pbs.twimg.com/media/CT5Dr8HUEAA-lEu.jpg   \n",
       "4  666049248165822465  https://pbs.twimg.com/media/CT5IQmsXIAAKY4A.jpg   \n",
       "\n",
       "   img_num                      p1   p1_conf  p1_dog                  p2  \\\n",
       "0        1  Welsh_springer_spaniel  0.465074    True              collie   \n",
       "1        1                 redbone  0.506826    True  miniature_pinscher   \n",
       "2        1         German_shepherd  0.596461    True            malinois   \n",
       "3        1     Rhodesian_ridgeback  0.408143    True             redbone   \n",
       "4        1      miniature_pinscher  0.560311    True          Rottweiler   \n",
       "\n",
       "    p2_conf  p2_dog                   p3   p3_conf  p3_dog  \n",
       "0  0.156665    True    Shetland_sheepdog  0.061428    True  \n",
       "1  0.074192    True  Rhodesian_ridgeback  0.072010    True  \n",
       "2  0.138584    True           bloodhound  0.116197    True  \n",
       "3  0.360687    True   miniature_pinscher  0.222752    True  \n",
       "4  0.243682    True             Doberman  0.154629    True  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the data gathered data files\n",
    "predictions.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>jpg_url</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p1_dog</th>\n",
       "      <th>p2</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p2_dog</th>\n",
       "      <th>p3</th>\n",
       "      <th>p3_conf</th>\n",
       "      <th>p3_dog</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2070</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>https://pbs.twimg.com/media/DF6hr6BUMAAzZgT.jpg</td>\n",
       "      <td>2</td>\n",
       "      <td>basset</td>\n",
       "      <td>0.555712</td>\n",
       "      <td>True</td>\n",
       "      <td>English_springer</td>\n",
       "      <td>0.225770</td>\n",
       "      <td>True</td>\n",
       "      <td>German_short-haired_pointer</td>\n",
       "      <td>0.175219</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2071</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>https://pbs.twimg.com/media/DF_q7IAWsAEuuN8.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>paper_towel</td>\n",
       "      <td>0.170278</td>\n",
       "      <td>False</td>\n",
       "      <td>Labrador_retriever</td>\n",
       "      <td>0.168086</td>\n",
       "      <td>True</td>\n",
       "      <td>spatula</td>\n",
       "      <td>0.040836</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2072</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>https://pbs.twimg.com/media/DGBdLU1WsAANxJ9.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>Chihuahua</td>\n",
       "      <td>0.716012</td>\n",
       "      <td>True</td>\n",
       "      <td>malamute</td>\n",
       "      <td>0.078253</td>\n",
       "      <td>True</td>\n",
       "      <td>kelpie</td>\n",
       "      <td>0.031379</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2073</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>https://pbs.twimg.com/media/DGGmoV4XsAAUL6n.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>Chihuahua</td>\n",
       "      <td>0.323581</td>\n",
       "      <td>True</td>\n",
       "      <td>Pekinese</td>\n",
       "      <td>0.090647</td>\n",
       "      <td>True</td>\n",
       "      <td>papillon</td>\n",
       "      <td>0.068957</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2074</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>https://pbs.twimg.com/media/DGKD1-bXoAAIAUK.jpg</td>\n",
       "      <td>1</td>\n",
       "      <td>orange</td>\n",
       "      <td>0.097049</td>\n",
       "      <td>False</td>\n",
       "      <td>bagel</td>\n",
       "      <td>0.085851</td>\n",
       "      <td>False</td>\n",
       "      <td>banana</td>\n",
       "      <td>0.076110</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                tweet_id                                          jpg_url  \\\n",
       "2070  891327558926688256  https://pbs.twimg.com/media/DF6hr6BUMAAzZgT.jpg   \n",
       "2071  891689557279858688  https://pbs.twimg.com/media/DF_q7IAWsAEuuN8.jpg   \n",
       "2072  891815181378084864  https://pbs.twimg.com/media/DGBdLU1WsAANxJ9.jpg   \n",
       "2073  892177421306343426  https://pbs.twimg.com/media/DGGmoV4XsAAUL6n.jpg   \n",
       "2074  892420643555336193  https://pbs.twimg.com/media/DGKD1-bXoAAIAUK.jpg   \n",
       "\n",
       "      img_num           p1   p1_conf  p1_dog                  p2   p2_conf  \\\n",
       "2070        2       basset  0.555712    True    English_springer  0.225770   \n",
       "2071        1  paper_towel  0.170278   False  Labrador_retriever  0.168086   \n",
       "2072        1    Chihuahua  0.716012    True            malamute  0.078253   \n",
       "2073        1    Chihuahua  0.323581    True            Pekinese  0.090647   \n",
       "2074        1       orange  0.097049   False               bagel  0.085851   \n",
       "\n",
       "      p2_dog                           p3   p3_conf  p3_dog  \n",
       "2070    True  German_short-haired_pointer  0.175219    True  \n",
       "2071    True                      spatula  0.040836   False  \n",
       "2072    True                       kelpie  0.031379    True  \n",
       "2073    True                     papillon  0.068957    True  \n",
       "2074   False                       banana  0.076110   False  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2075, 12)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2075 entries, 0 to 2074\n",
      "Data columns (total 12 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   tweet_id  2075 non-null   int64  \n",
      " 1   jpg_url   2075 non-null   object \n",
      " 2   img_num   2075 non-null   int64  \n",
      " 3   p1        2075 non-null   object \n",
      " 4   p1_conf   2075 non-null   float64\n",
      " 5   p1_dog    2075 non-null   bool   \n",
      " 6   p2        2075 non-null   object \n",
      " 7   p2_conf   2075 non-null   float64\n",
      " 8   p2_dog    2075 non-null   bool   \n",
      " 9   p3        2075 non-null   object \n",
      " 10  p3_conf   2075 non-null   float64\n",
      " 11  p3_dog    2075 non-null   bool   \n",
      "dtypes: bool(3), float64(3), int64(2), object(4)\n",
      "memory usage: 152.1+ KB\n"
     ]
    }
   ],
   "source": [
    "predictions.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p3_conf</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.075000e+03</td>\n",
       "      <td>2075.000000</td>\n",
       "      <td>2075.000000</td>\n",
       "      <td>2.075000e+03</td>\n",
       "      <td>2.075000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.384514e+17</td>\n",
       "      <td>1.203855</td>\n",
       "      <td>0.594548</td>\n",
       "      <td>1.345886e-01</td>\n",
       "      <td>6.032417e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.785203e+16</td>\n",
       "      <td>0.561875</td>\n",
       "      <td>0.271174</td>\n",
       "      <td>1.006657e-01</td>\n",
       "      <td>5.090593e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>6.660209e+17</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.044333</td>\n",
       "      <td>1.011300e-08</td>\n",
       "      <td>1.740170e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.764835e+17</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.364412</td>\n",
       "      <td>5.388625e-02</td>\n",
       "      <td>1.622240e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.119988e+17</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.588230</td>\n",
       "      <td>1.181810e-01</td>\n",
       "      <td>4.944380e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.932034e+17</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.843855</td>\n",
       "      <td>1.955655e-01</td>\n",
       "      <td>9.180755e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8.924206e+17</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.880140e-01</td>\n",
       "      <td>2.734190e-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           tweet_id      img_num      p1_conf       p2_conf       p3_conf\n",
       "count  2.075000e+03  2075.000000  2075.000000  2.075000e+03  2.075000e+03\n",
       "mean   7.384514e+17     1.203855     0.594548  1.345886e-01  6.032417e-02\n",
       "std    6.785203e+16     0.561875     0.271174  1.006657e-01  5.090593e-02\n",
       "min    6.660209e+17     1.000000     0.044333  1.011300e-08  1.740170e-10\n",
       "25%    6.764835e+17     1.000000     0.364412  5.388625e-02  1.622240e-02\n",
       "50%    7.119988e+17     1.000000     0.588230  1.181810e-01  4.944380e-02\n",
       "75%    7.932034e+17     1.000000     0.843855  1.955655e-01  9.180755e-02\n",
       "max    8.924206e+17     4.000000     1.000000  4.880140e-01  2.734190e-01"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>created_at</th>\n",
       "      <th>id</th>\n",
       "      <th>id_str</th>\n",
       "      <th>full_text</th>\n",
       "      <th>truncated</th>\n",
       "      <th>display_text_range</th>\n",
       "      <th>entities</th>\n",
       "      <th>extended_entities</th>\n",
       "      <th>source</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>...</th>\n",
       "      <th>favorited</th>\n",
       "      <th>retweeted</th>\n",
       "      <th>possibly_sensitive</th>\n",
       "      <th>possibly_sensitive_appealable</th>\n",
       "      <th>lang</th>\n",
       "      <th>retweeted_status</th>\n",
       "      <th>quoted_status_id</th>\n",
       "      <th>quoted_status_id_str</th>\n",
       "      <th>quoted_status_permalink</th>\n",
       "      <th>quoted_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-08-01 16:23:56+00:00</td>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>892420643555336192</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>False</td>\n",
       "      <td>[0, 85]</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'media': [{'id': 892420639486877696, 'id_str'...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-08-01 00:17:27+00:00</td>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>892177421306343424</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>False</td>\n",
       "      <td>[0, 138]</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'media': [{'id': 892177413194625024, 'id_str'...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-07-31 00:18:03+00:00</td>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>False</td>\n",
       "      <td>[0, 121]</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'media': [{'id': 891815175371796480, 'id_str'...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-07-30 15:58:51+00:00</td>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>False</td>\n",
       "      <td>[0, 79]</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'media': [{'id': 891689552724799489, 'id_str'...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-07-29 16:00:24+00:00</td>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>False</td>\n",
       "      <td>[0, 138]</td>\n",
       "      <td>{'hashtags': [{'text': 'BarkWeek', 'indices': ...</td>\n",
       "      <td>{'media': [{'id': 891327551943041024, 'id_str'...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 created_at                  id              id_str  \\\n",
       "0 2017-08-01 16:23:56+00:00  892420643555336193  892420643555336192   \n",
       "1 2017-08-01 00:17:27+00:00  892177421306343426  892177421306343424   \n",
       "2 2017-07-31 00:18:03+00:00  891815181378084864  891815181378084864   \n",
       "3 2017-07-30 15:58:51+00:00  891689557279858688  891689557279858688   \n",
       "4 2017-07-29 16:00:24+00:00  891327558926688256  891327558926688256   \n",
       "\n",
       "                                           full_text  truncated  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...      False   \n",
       "1  This is Tilly. She's just checking pup on you....      False   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...      False   \n",
       "3  This is Darla. She commenced a snooze mid meal...      False   \n",
       "4  This is Franklin. He would like you to stop ca...      False   \n",
       "\n",
       "  display_text_range                                           entities  \\\n",
       "0            [0, 85]  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "1           [0, 138]  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "2           [0, 121]  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "3            [0, 79]  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "4           [0, 138]  {'hashtags': [{'text': 'BarkWeek', 'indices': ...   \n",
       "\n",
       "                                   extended_entities  \\\n",
       "0  {'media': [{'id': 892420639486877696, 'id_str'...   \n",
       "1  {'media': [{'id': 892177413194625024, 'id_str'...   \n",
       "2  {'media': [{'id': 891815175371796480, 'id_str'...   \n",
       "3  {'media': [{'id': 891689552724799489, 'id_str'...   \n",
       "4  {'media': [{'id': 891327551943041024, 'id_str'...   \n",
       "\n",
       "                                              source  in_reply_to_status_id  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...                    NaN   \n",
       "1  <a href=\"http://twitter.com/download/iphone\" r...                    NaN   \n",
       "2  <a href=\"http://twitter.com/download/iphone\" r...                    NaN   \n",
       "3  <a href=\"http://twitter.com/download/iphone\" r...                    NaN   \n",
       "4  <a href=\"http://twitter.com/download/iphone\" r...                    NaN   \n",
       "\n",
       "   ...  favorited  retweeted  possibly_sensitive  \\\n",
       "0  ...      False      False                 0.0   \n",
       "1  ...      False      False                 0.0   \n",
       "2  ...      False      False                 0.0   \n",
       "3  ...      False      False                 0.0   \n",
       "4  ...      False      False                 0.0   \n",
       "\n",
       "  possibly_sensitive_appealable lang  retweeted_status  quoted_status_id  \\\n",
       "0                           0.0   en               NaN               NaN   \n",
       "1                           0.0   en               NaN               NaN   \n",
       "2                           0.0   en               NaN               NaN   \n",
       "3                           0.0   en               NaN               NaN   \n",
       "4                           0.0   en               NaN               NaN   \n",
       "\n",
       "  quoted_status_id_str  quoted_status_permalink  quoted_status  \n",
       "0                  NaN                      NaN            NaN  \n",
       "1                  NaN                      NaN            NaN  \n",
       "2                  NaN                      NaN            NaN  \n",
       "3                  NaN                      NaN            NaN  \n",
       "4                  NaN                      NaN            NaN  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the data gathered data files\n",
    "tweets.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>created_at</th>\n",
       "      <th>id</th>\n",
       "      <th>id_str</th>\n",
       "      <th>full_text</th>\n",
       "      <th>truncated</th>\n",
       "      <th>display_text_range</th>\n",
       "      <th>entities</th>\n",
       "      <th>extended_entities</th>\n",
       "      <th>source</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>...</th>\n",
       "      <th>favorited</th>\n",
       "      <th>retweeted</th>\n",
       "      <th>possibly_sensitive</th>\n",
       "      <th>possibly_sensitive_appealable</th>\n",
       "      <th>lang</th>\n",
       "      <th>retweeted_status</th>\n",
       "      <th>quoted_status_id</th>\n",
       "      <th>quoted_status_id_str</th>\n",
       "      <th>quoted_status_permalink</th>\n",
       "      <th>quoted_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2322</th>\n",
       "      <td>2015-11-16 00:24:50+00:00</td>\n",
       "      <td>666049248165822465</td>\n",
       "      <td>666049248165822464</td>\n",
       "      <td>Here we have a 1949 1st generation vulpix. Enj...</td>\n",
       "      <td>False</td>\n",
       "      <td>[0, 120]</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'media': [{'id': 666049244999131136, 'id_str'...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2323</th>\n",
       "      <td>2015-11-16 00:04:52+00:00</td>\n",
       "      <td>666044226329800704</td>\n",
       "      <td>666044226329800704</td>\n",
       "      <td>This is a purebred Piers Morgan. Loves to Netf...</td>\n",
       "      <td>False</td>\n",
       "      <td>[0, 137]</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'media': [{'id': 666044217047650304, 'id_str'...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2324</th>\n",
       "      <td>2015-11-15 23:21:54+00:00</td>\n",
       "      <td>666033412701032449</td>\n",
       "      <td>666033412701032448</td>\n",
       "      <td>Here is a very happy pup. Big fan of well-main...</td>\n",
       "      <td>False</td>\n",
       "      <td>[0, 130]</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'media': [{'id': 666033409081393153, 'id_str'...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2325</th>\n",
       "      <td>2015-11-15 23:05:30+00:00</td>\n",
       "      <td>666029285002620928</td>\n",
       "      <td>666029285002620928</td>\n",
       "      <td>This is a western brown Mitsubishi terrier. Up...</td>\n",
       "      <td>False</td>\n",
       "      <td>[0, 139]</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'media': [{'id': 666029276303482880, 'id_str'...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2326</th>\n",
       "      <td>2015-11-15 22:32:08+00:00</td>\n",
       "      <td>666020888022790149</td>\n",
       "      <td>666020888022790144</td>\n",
       "      <td>Here we have a Japanese Irish Setter. Lost eye...</td>\n",
       "      <td>False</td>\n",
       "      <td>[0, 131]</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'media': [{'id': 666020881337073664, 'id_str'...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    created_at                  id              id_str  \\\n",
       "2322 2015-11-16 00:24:50+00:00  666049248165822465  666049248165822464   \n",
       "2323 2015-11-16 00:04:52+00:00  666044226329800704  666044226329800704   \n",
       "2324 2015-11-15 23:21:54+00:00  666033412701032449  666033412701032448   \n",
       "2325 2015-11-15 23:05:30+00:00  666029285002620928  666029285002620928   \n",
       "2326 2015-11-15 22:32:08+00:00  666020888022790149  666020888022790144   \n",
       "\n",
       "                                              full_text  truncated  \\\n",
       "2322  Here we have a 1949 1st generation vulpix. Enj...      False   \n",
       "2323  This is a purebred Piers Morgan. Loves to Netf...      False   \n",
       "2324  Here is a very happy pup. Big fan of well-main...      False   \n",
       "2325  This is a western brown Mitsubishi terrier. Up...      False   \n",
       "2326  Here we have a Japanese Irish Setter. Lost eye...      False   \n",
       "\n",
       "     display_text_range                                           entities  \\\n",
       "2322           [0, 120]  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "2323           [0, 137]  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "2324           [0, 130]  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "2325           [0, 139]  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "2326           [0, 131]  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "\n",
       "                                      extended_entities  \\\n",
       "2322  {'media': [{'id': 666049244999131136, 'id_str'...   \n",
       "2323  {'media': [{'id': 666044217047650304, 'id_str'...   \n",
       "2324  {'media': [{'id': 666033409081393153, 'id_str'...   \n",
       "2325  {'media': [{'id': 666029276303482880, 'id_str'...   \n",
       "2326  {'media': [{'id': 666020881337073664, 'id_str'...   \n",
       "\n",
       "                                                 source  \\\n",
       "2322  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2323  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2324  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2325  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2326  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "      in_reply_to_status_id  ...  favorited  retweeted  possibly_sensitive  \\\n",
       "2322                    NaN  ...      False      False                 0.0   \n",
       "2323                    NaN  ...      False      False                 0.0   \n",
       "2324                    NaN  ...      False      False                 0.0   \n",
       "2325                    NaN  ...      False      False                 0.0   \n",
       "2326                    NaN  ...      False      False                 0.0   \n",
       "\n",
       "     possibly_sensitive_appealable lang  retweeted_status  quoted_status_id  \\\n",
       "2322                           0.0   en               NaN               NaN   \n",
       "2323                           0.0   en               NaN               NaN   \n",
       "2324                           0.0   en               NaN               NaN   \n",
       "2325                           0.0   en               NaN               NaN   \n",
       "2326                           0.0   en               NaN               NaN   \n",
       "\n",
       "     quoted_status_id_str  quoted_status_permalink  quoted_status  \n",
       "2322                  NaN                      NaN            NaN  \n",
       "2323                  NaN                      NaN            NaN  \n",
       "2324                  NaN                      NaN            NaN  \n",
       "2325                  NaN                      NaN            NaN  \n",
       "2326                  NaN                      NaN            NaN  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweets.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2327, 32)"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweets.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2327 entries, 0 to 2326\n",
      "Data columns (total 32 columns):\n",
      " #   Column                         Non-Null Count  Dtype              \n",
      "---  ------                         --------------  -----              \n",
      " 0   created_at                     2327 non-null   datetime64[ns, UTC]\n",
      " 1   id                             2327 non-null   int64              \n",
      " 2   id_str                         2327 non-null   int64              \n",
      " 3   full_text                      2327 non-null   object             \n",
      " 4   truncated                      2327 non-null   bool               \n",
      " 5   display_text_range             2327 non-null   object             \n",
      " 6   entities                       2327 non-null   object             \n",
      " 7   extended_entities              2057 non-null   object             \n",
      " 8   source                         2327 non-null   object             \n",
      " 9   in_reply_to_status_id          77 non-null     float64            \n",
      " 10  in_reply_to_status_id_str      77 non-null     float64            \n",
      " 11  in_reply_to_user_id            77 non-null     float64            \n",
      " 12  in_reply_to_user_id_str        77 non-null     float64            \n",
      " 13  in_reply_to_screen_name        77 non-null     object             \n",
      " 14  user                           2327 non-null   object             \n",
      " 15  geo                            0 non-null      float64            \n",
      " 16  coordinates                    0 non-null      float64            \n",
      " 17  place                          1 non-null      object             \n",
      " 18  contributors                   0 non-null      float64            \n",
      " 19  is_quote_status                2327 non-null   bool               \n",
      " 20  retweet_count                  2327 non-null   int64              \n",
      " 21  favorite_count                 2327 non-null   int64              \n",
      " 22  favorited                      2327 non-null   bool               \n",
      " 23  retweeted                      2327 non-null   bool               \n",
      " 24  possibly_sensitive             2195 non-null   float64            \n",
      " 25  possibly_sensitive_appealable  2195 non-null   float64            \n",
      " 26  lang                           2327 non-null   object             \n",
      " 27  retweeted_status               160 non-null    object             \n",
      " 28  quoted_status_id               26 non-null     float64            \n",
      " 29  quoted_status_id_str           26 non-null     float64            \n",
      " 30  quoted_status_permalink        26 non-null     object             \n",
      " 31  quoted_status                  24 non-null     object             \n",
      "dtypes: bool(4), datetime64[ns, UTC](1), float64(11), int64(4), object(12)\n",
      "memory usage: 518.2+ KB\n"
     ]
    }
   ],
   "source": [
    "tweets.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>id_str</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_status_id_str</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>in_reply_to_user_id_str</th>\n",
       "      <th>geo</th>\n",
       "      <th>coordinates</th>\n",
       "      <th>contributors</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>possibly_sensitive</th>\n",
       "      <th>possibly_sensitive_appealable</th>\n",
       "      <th>quoted_status_id</th>\n",
       "      <th>quoted_status_id_str</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.327000e+03</td>\n",
       "      <td>2.327000e+03</td>\n",
       "      <td>7.700000e+01</td>\n",
       "      <td>7.700000e+01</td>\n",
       "      <td>7.700000e+01</td>\n",
       "      <td>7.700000e+01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2327.000000</td>\n",
       "      <td>2327.000000</td>\n",
       "      <td>2195.0</td>\n",
       "      <td>2195.0</td>\n",
       "      <td>2.600000e+01</td>\n",
       "      <td>2.600000e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.418335e+17</td>\n",
       "      <td>7.418335e+17</td>\n",
       "      <td>7.440692e+17</td>\n",
       "      <td>7.440692e+17</td>\n",
       "      <td>2.040329e+16</td>\n",
       "      <td>2.040329e+16</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2529.237645</td>\n",
       "      <td>7196.311560</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.113972e+17</td>\n",
       "      <td>8.113972e+17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.824532e+16</td>\n",
       "      <td>6.824532e+16</td>\n",
       "      <td>7.524295e+16</td>\n",
       "      <td>7.524295e+16</td>\n",
       "      <td>1.260797e+17</td>\n",
       "      <td>1.260797e+17</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4281.349538</td>\n",
       "      <td>11176.006039</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.295843e+16</td>\n",
       "      <td>6.295843e+16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>6.660209e+17</td>\n",
       "      <td>6.660209e+17</td>\n",
       "      <td>6.658147e+17</td>\n",
       "      <td>6.658147e+17</td>\n",
       "      <td>1.185634e+07</td>\n",
       "      <td>1.185634e+07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.721083e+17</td>\n",
       "      <td>6.721083e+17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.781394e+17</td>\n",
       "      <td>6.781394e+17</td>\n",
       "      <td>6.757073e+17</td>\n",
       "      <td>6.757073e+17</td>\n",
       "      <td>3.589728e+08</td>\n",
       "      <td>3.589728e+08</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>511.500000</td>\n",
       "      <td>1250.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.761338e+17</td>\n",
       "      <td>7.761338e+17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.178418e+17</td>\n",
       "      <td>7.178418e+17</td>\n",
       "      <td>7.032559e+17</td>\n",
       "      <td>7.032559e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1178.000000</td>\n",
       "      <td>3114.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.281173e+17</td>\n",
       "      <td>8.281173e+17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.986692e+17</td>\n",
       "      <td>7.986692e+17</td>\n",
       "      <td>8.233264e+17</td>\n",
       "      <td>8.233264e+17</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>4.196984e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2925.500000</td>\n",
       "      <td>8780.500000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.637581e+17</td>\n",
       "      <td>8.637581e+17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8.924206e+17</td>\n",
       "      <td>8.924206e+17</td>\n",
       "      <td>8.862664e+17</td>\n",
       "      <td>8.862664e+17</td>\n",
       "      <td>8.405479e+17</td>\n",
       "      <td>8.405479e+17</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>72461.000000</td>\n",
       "      <td>147735.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.860534e+17</td>\n",
       "      <td>8.860534e+17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id        id_str  in_reply_to_status_id  \\\n",
       "count  2.327000e+03  2.327000e+03           7.700000e+01   \n",
       "mean   7.418335e+17  7.418335e+17           7.440692e+17   \n",
       "std    6.824532e+16  6.824532e+16           7.524295e+16   \n",
       "min    6.660209e+17  6.660209e+17           6.658147e+17   \n",
       "25%    6.781394e+17  6.781394e+17           6.757073e+17   \n",
       "50%    7.178418e+17  7.178418e+17           7.032559e+17   \n",
       "75%    7.986692e+17  7.986692e+17           8.233264e+17   \n",
       "max    8.924206e+17  8.924206e+17           8.862664e+17   \n",
       "\n",
       "       in_reply_to_status_id_str  in_reply_to_user_id  \\\n",
       "count               7.700000e+01         7.700000e+01   \n",
       "mean                7.440692e+17         2.040329e+16   \n",
       "std                 7.524295e+16         1.260797e+17   \n",
       "min                 6.658147e+17         1.185634e+07   \n",
       "25%                 6.757073e+17         3.589728e+08   \n",
       "50%                 7.032559e+17         4.196984e+09   \n",
       "75%                 8.233264e+17         4.196984e+09   \n",
       "max                 8.862664e+17         8.405479e+17   \n",
       "\n",
       "       in_reply_to_user_id_str  geo  coordinates  contributors  retweet_count  \\\n",
       "count             7.700000e+01  0.0          0.0           0.0    2327.000000   \n",
       "mean              2.040329e+16  NaN          NaN           NaN    2529.237645   \n",
       "std               1.260797e+17  NaN          NaN           NaN    4281.349538   \n",
       "min               1.185634e+07  NaN          NaN           NaN       1.000000   \n",
       "25%               3.589728e+08  NaN          NaN           NaN     511.500000   \n",
       "50%               4.196984e+09  NaN          NaN           NaN    1178.000000   \n",
       "75%               4.196984e+09  NaN          NaN           NaN    2925.500000   \n",
       "max               8.405479e+17  NaN          NaN           NaN   72461.000000   \n",
       "\n",
       "       favorite_count  possibly_sensitive  possibly_sensitive_appealable  \\\n",
       "count     2327.000000              2195.0                         2195.0   \n",
       "mean      7196.311560                 0.0                            0.0   \n",
       "std      11176.006039                 0.0                            0.0   \n",
       "min          0.000000                 0.0                            0.0   \n",
       "25%       1250.000000                 0.0                            0.0   \n",
       "50%       3114.000000                 0.0                            0.0   \n",
       "75%       8780.500000                 0.0                            0.0   \n",
       "max     147735.000000                 0.0                            0.0   \n",
       "\n",
       "       quoted_status_id  quoted_status_id_str  \n",
       "count      2.600000e+01          2.600000e+01  \n",
       "mean       8.113972e+17          8.113972e+17  \n",
       "std        6.295843e+16          6.295843e+16  \n",
       "min        6.721083e+17          6.721083e+17  \n",
       "25%        7.761338e+17          7.761338e+17  \n",
       "50%        8.281173e+17          8.281173e+17  \n",
       "75%        8.637581e+17          8.637581e+17  \n",
       "max        8.860534e+17          8.860534e+17  "
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweets.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Quality issues\n",
    "#### Archive\n",
    "\n",
    "1. [The timestamp field is in string format (object) and tweet_id is in int64](#1)\n",
    "\n",
    "2. [There are only 181 retweets (retweeted_status_id, retweeted_status_user_id, retweeted_status_timestamp)](#2)\n",
    "\n",
    "3. [There are only 78 replies (in_reply_to_status_id, in_reply_to_user_id)](#3)\n",
    "\n",
    "4. [There are missing values in the column expanded_urls](#4)\n",
    "\n",
    "5. [Column name floofer should be spelled 'floof'](#5)\n",
    "\n",
    "6. [Dogs with no name in the description have given names of \"a\", \"an\" and \"None\" instead of \"NaN\"](#6)\n",
    "\n",
    "7. [In the column rating_denominator there are votes greater than 10](#7)\n",
    "\n",
    "8. [Drop unnecessary columns](#8)\n",
    "\n",
    "#### Predictions\n",
    "\n",
    "9. [The types of dogs in columns p1, p2, and p3 have some lowercase and uppercase letters](#9)\n",
    "\n",
    "10. [The tweet_id field is in int64, should be in string format](#10)\n",
    "\n",
    "#### Tweets\n",
    "\n",
    "11. [Rename the column 'id' to 'tweet_id' to facilitate merging](#11)\n",
    "\n",
    "12. [Clean up text column to show only the text](#12)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "extensions": {
     "jupyter_dashboards": {
      "version": 1,
      "views": {
       "grid_default": {
        "col": 0,
        "height": 7,
        "hidden": false,
        "row": 40,
        "width": 12
       },
       "report_default": {
        "hidden": false
       }
      }
     }
    }
   },
   "source": [
    "### Tidiness issues\n",
    "\n",
    "#### Archive\n",
    "\n",
    "1. [Several columns representing the same category, which is divided into \"doggo\", \"flooter\", \"pupper\", \"puppo\" columns, but we need only one column to represent this classifications](#a)\n",
    "\n",
    "2. [Merge all tables to realize any analysis](#b)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "extensions": {
     "jupyter_dashboards": {
      "version": 1,
      "views": {
       "grid_default": {
        "col": 4,
        "height": 4,
        "hidden": false,
        "row": 32,
        "width": 4
       },
       "report_default": {
        "hidden": false
       }
      }
     }
    }
   },
   "source": [
    "## Cleaning Data\n",
    "In this section were clean up **all** of the issues you documented while assessing. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make copies of original pieces of data\n",
    "archive_clean = archive.copy()\n",
    "predictions_clean = predictions.copy()\n",
    "tweets_clean = tweets.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Quality issues"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #1: Erroneous data types\n",
    "<a id=\"1\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: The timestamp field is in string format (object) and tweet_id is in int64"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [],
   "source": [
    "#change the dtype of column timestamp from object to datetime\n",
    "archive_clean.timestamp = archive_clean.timestamp.astype('datetime64')\n",
    "archive_clean.tweet_id = archive_clean.tweet_id.astype(str)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2356 entries, 0 to 2355\n",
      "Data columns (total 17 columns):\n",
      " #   Column                      Non-Null Count  Dtype         \n",
      "---  ------                      --------------  -----         \n",
      " 0   tweet_id                    2356 non-null   object        \n",
      " 1   in_reply_to_status_id       78 non-null     float64       \n",
      " 2   in_reply_to_user_id         78 non-null     float64       \n",
      " 3   timestamp                   2356 non-null   datetime64[ns]\n",
      " 4   source                      2356 non-null   object        \n",
      " 5   text                        2356 non-null   object        \n",
      " 6   retweeted_status_id         181 non-null    float64       \n",
      " 7   retweeted_status_user_id    181 non-null    float64       \n",
      " 8   retweeted_status_timestamp  181 non-null    object        \n",
      " 9   expanded_urls               2297 non-null   object        \n",
      " 10  rating_numerator            2356 non-null   int64         \n",
      " 11  rating_denominator          2356 non-null   int64         \n",
      " 12  name                        2356 non-null   object        \n",
      " 13  doggo                       2356 non-null   object        \n",
      " 14  floofer                     2356 non-null   object        \n",
      " 15  pupper                      2356 non-null   object        \n",
      " 16  puppo                       2356 non-null   object        \n",
      "dtypes: datetime64[ns](1), float64(4), int64(2), object(10)\n",
      "memory usage: 313.0+ KB\n"
     ]
    }
   ],
   "source": [
    "#Check for changes\n",
    "archive_clean.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #2: Missing records \n",
    "<a id=\"2\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "extensions": {
     "jupyter_dashboards": {
      "version": 1,
      "views": {
       "grid_default": {
        "hidden": true
       },
       "report_default": {
        "hidden": true
       }
      }
     }
    }
   },
   "source": [
    "#### Define: There are only 181 retweets (retweeted_status_id, retweeted_status_user_id, retweeted_status_timestamp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Use drop function to drop the non necessary columns\n",
    "archive_clean = archive_clean.drop(['retweeted_status_id', 'retweeted_status_user_id', 'retweeted_status_timestamp'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>in_reply_to_user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-01 16:23:56</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892420643...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-01 00:17:27</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892177421...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-31 00:18:03</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891815181...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Archie</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-30 15:58:51</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891689557...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Darla</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-29 16:00:24</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891327558...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id  in_reply_to_status_id  in_reply_to_user_id  \\\n",
       "0  892420643555336193                    NaN                  NaN   \n",
       "1  892177421306343426                    NaN                  NaN   \n",
       "2  891815181378084864                    NaN                  NaN   \n",
       "3  891689557279858688                    NaN                  NaN   \n",
       "4  891327558926688256                    NaN                  NaN   \n",
       "\n",
       "            timestamp                                             source  \\\n",
       "0 2017-08-01 16:23:56  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "1 2017-08-01 00:17:27  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2 2017-07-31 00:18:03  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "3 2017-07-30 15:58:51  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "4 2017-07-29 16:00:24  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                text  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...   \n",
       "1  This is Tilly. She's just checking pup on you....   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...   \n",
       "3  This is Darla. She commenced a snooze mid meal...   \n",
       "4  This is Franklin. He would like you to stop ca...   \n",
       "\n",
       "                                       expanded_urls  rating_numerator  \\\n",
       "0  https://twitter.com/dog_rates/status/892420643...                13   \n",
       "1  https://twitter.com/dog_rates/status/892177421...                13   \n",
       "2  https://twitter.com/dog_rates/status/891815181...                12   \n",
       "3  https://twitter.com/dog_rates/status/891689557...                13   \n",
       "4  https://twitter.com/dog_rates/status/891327558...                12   \n",
       "\n",
       "   rating_denominator      name doggo floofer pupper puppo  \n",
       "0                  10   Phineas  None    None   None  None  \n",
       "1                  10     Tilly  None    None   None  None  \n",
       "2                  10    Archie  None    None   None  None  \n",
       "3                  10     Darla  None    None   None  None  \n",
       "4                  10  Franklin  None    None   None  None  "
      ]
     },
     "execution_count": 304,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for changes\n",
    "archive_clean.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #3: Missing records \n",
    "<a id=\"3\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: There are only 78 replies (in_reply_to_status_id, in_reply_to_user_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Use drop function to drop the non necessary columns\n",
    "archive_clean = archive_clean.drop(['in_reply_to_status_id', 'in_reply_to_user_id'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>expanded_urls</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01 16:23:56</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892420643...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>2017-08-01 00:17:27</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>https://twitter.com/dog_rates/status/892177421...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>2017-07-31 00:18:03</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891815181...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Archie</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>2017-07-30 15:58:51</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891689557...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Darla</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>2017-07-29 16:00:24</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>https://twitter.com/dog_rates/status/891327558...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id           timestamp  \\\n",
       "0  892420643555336193 2017-08-01 16:23:56   \n",
       "1  892177421306343426 2017-08-01 00:17:27   \n",
       "2  891815181378084864 2017-07-31 00:18:03   \n",
       "3  891689557279858688 2017-07-30 15:58:51   \n",
       "4  891327558926688256 2017-07-29 16:00:24   \n",
       "\n",
       "                                              source  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "1  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "3  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "4  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                text  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...   \n",
       "1  This is Tilly. She's just checking pup on you....   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...   \n",
       "3  This is Darla. She commenced a snooze mid meal...   \n",
       "4  This is Franklin. He would like you to stop ca...   \n",
       "\n",
       "                                       expanded_urls  rating_numerator  \\\n",
       "0  https://twitter.com/dog_rates/status/892420643...                13   \n",
       "1  https://twitter.com/dog_rates/status/892177421...                13   \n",
       "2  https://twitter.com/dog_rates/status/891815181...                12   \n",
       "3  https://twitter.com/dog_rates/status/891689557...                13   \n",
       "4  https://twitter.com/dog_rates/status/891327558...                12   \n",
       "\n",
       "   rating_denominator      name doggo floofer pupper puppo  \n",
       "0                  10   Phineas  None    None   None  None  \n",
       "1                  10     Tilly  None    None   None  None  \n",
       "2                  10    Archie  None    None   None  None  \n",
       "3                  10     Darla  None    None   None  None  \n",
       "4                  10  Franklin  None    None   None  None  "
      ]
     },
     "execution_count": 306,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for changes\n",
    "archive_clean.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #4: Missing records \n",
    "<a id=\"4\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: There are missing values in the column expanded_urls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Use drop function to drop the  expanded_urls. We wont use this column for the analysis\n",
    "archive_clean = archive_clean.drop(['expanded_urls'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floofer</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01 16:23:56</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>2017-08-01 00:17:27</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>2017-07-31 00:18:03</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Archie</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>2017-07-30 15:58:51</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Darla</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>2017-07-29 16:00:24</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id           timestamp  \\\n",
       "0  892420643555336193 2017-08-01 16:23:56   \n",
       "1  892177421306343426 2017-08-01 00:17:27   \n",
       "2  891815181378084864 2017-07-31 00:18:03   \n",
       "3  891689557279858688 2017-07-30 15:58:51   \n",
       "4  891327558926688256 2017-07-29 16:00:24   \n",
       "\n",
       "                                              source  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "1  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "3  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "4  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                text  rating_numerator  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                13   \n",
       "1  This is Tilly. She's just checking pup on you....                13   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...                12   \n",
       "3  This is Darla. She commenced a snooze mid meal...                13   \n",
       "4  This is Franklin. He would like you to stop ca...                12   \n",
       "\n",
       "   rating_denominator      name doggo floofer pupper puppo  \n",
       "0                  10   Phineas  None    None   None  None  \n",
       "1                  10     Tilly  None    None   None  None  \n",
       "2                  10    Archie  None    None   None  None  \n",
       "3                  10     Darla  None    None   None  None  \n",
       "4                  10  Franklin  None    None   None  None  "
      ]
     },
     "execution_count": 308,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for changes\n",
    "archive_clean.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #5: Correct the column name\n",
    "<a id=\"5\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Column name floofer should be spelled 'floof'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Rename the column 'floofer'\n",
    "archive_clean = archive_clean.rename(columns={'floofer':'floof'})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floof</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01 16:23:56</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>2017-08-01 00:17:27</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>2017-07-31 00:18:03</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Archie</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>2017-07-30 15:58:51</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Darla</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>2017-07-29 16:00:24</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id           timestamp  \\\n",
       "0  892420643555336193 2017-08-01 16:23:56   \n",
       "1  892177421306343426 2017-08-01 00:17:27   \n",
       "2  891815181378084864 2017-07-31 00:18:03   \n",
       "3  891689557279858688 2017-07-30 15:58:51   \n",
       "4  891327558926688256 2017-07-29 16:00:24   \n",
       "\n",
       "                                              source  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "1  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "3  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "4  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                text  rating_numerator  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                13   \n",
       "1  This is Tilly. She's just checking pup on you....                13   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...                12   \n",
       "3  This is Darla. She commenced a snooze mid meal...                13   \n",
       "4  This is Franklin. He would like you to stop ca...                12   \n",
       "\n",
       "   rating_denominator      name doggo floof pupper puppo  \n",
       "0                  10   Phineas  None  None   None  None  \n",
       "1                  10     Tilly  None  None   None  None  \n",
       "2                  10    Archie  None  None   None  None  \n",
       "3                  10     Darla  None  None   None  None  \n",
       "4                  10  Franklin  None  None   None  None  "
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for changes\n",
    "archive_clean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [],
   "source": [
    "archive_clean.floof = archive_clean['floof'].map({'floofer':'floof'},\n",
    "                             na_action=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floof</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01 16:23:56</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>2017-08-01 00:17:27</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>2017-07-31 00:18:03</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Archie</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>2017-07-30 15:58:51</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>Darla</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>2017-07-29 16:00:24</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2351</th>\n",
       "      <td>666049248165822465</td>\n",
       "      <td>2015-11-16 00:24:50</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Here we have a 1949 1st generation vulpix. Enj...</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2352</th>\n",
       "      <td>666044226329800704</td>\n",
       "      <td>2015-11-16 00:04:52</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is a purebred Piers Morgan. Loves to Netf...</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>a</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2353</th>\n",
       "      <td>666033412701032449</td>\n",
       "      <td>2015-11-15 23:21:54</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Here is a very happy pup. Big fan of well-main...</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>a</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2354</th>\n",
       "      <td>666029285002620928</td>\n",
       "      <td>2015-11-15 23:05:30</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is a western brown Mitsubishi terrier. Up...</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>a</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2355</th>\n",
       "      <td>666020888022790149</td>\n",
       "      <td>2015-11-15 22:32:08</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Here we have a Japanese Irish Setter. Lost eye...</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2356 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                tweet_id           timestamp  \\\n",
       "0     892420643555336193 2017-08-01 16:23:56   \n",
       "1     892177421306343426 2017-08-01 00:17:27   \n",
       "2     891815181378084864 2017-07-31 00:18:03   \n",
       "3     891689557279858688 2017-07-30 15:58:51   \n",
       "4     891327558926688256 2017-07-29 16:00:24   \n",
       "...                  ...                 ...   \n",
       "2351  666049248165822465 2015-11-16 00:24:50   \n",
       "2352  666044226329800704 2015-11-16 00:04:52   \n",
       "2353  666033412701032449 2015-11-15 23:21:54   \n",
       "2354  666029285002620928 2015-11-15 23:05:30   \n",
       "2355  666020888022790149 2015-11-15 22:32:08   \n",
       "\n",
       "                                                 source  \\\n",
       "0     <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "1     <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2     <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "3     <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "4     <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "...                                                 ...   \n",
       "2351  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2352  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2353  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2354  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2355  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                   text  rating_numerator  \\\n",
       "0     This is Phineas. He's a mystical boy. Only eve...                13   \n",
       "1     This is Tilly. She's just checking pup on you....                13   \n",
       "2     This is Archie. He is a rare Norwegian Pouncin...                12   \n",
       "3     This is Darla. She commenced a snooze mid meal...                13   \n",
       "4     This is Franklin. He would like you to stop ca...                12   \n",
       "...                                                 ...               ...   \n",
       "2351  Here we have a 1949 1st generation vulpix. Enj...                 5   \n",
       "2352  This is a purebred Piers Morgan. Loves to Netf...                 6   \n",
       "2353  Here is a very happy pup. Big fan of well-main...                 9   \n",
       "2354  This is a western brown Mitsubishi terrier. Up...                 7   \n",
       "2355  Here we have a Japanese Irish Setter. Lost eye...                 8   \n",
       "\n",
       "      rating_denominator      name doggo floof pupper puppo  \n",
       "0                     10   Phineas  None   NaN   None  None  \n",
       "1                     10     Tilly  None   NaN   None  None  \n",
       "2                     10    Archie  None   NaN   None  None  \n",
       "3                     10     Darla  None   NaN   None  None  \n",
       "4                     10  Franklin  None   NaN   None  None  \n",
       "...                  ...       ...   ...   ...    ...   ...  \n",
       "2351                  10      None  None   NaN   None  None  \n",
       "2352                  10         a  None   NaN   None  None  \n",
       "2353                  10         a  None   NaN   None  None  \n",
       "2354                  10         a  None   NaN   None  None  \n",
       "2355                  10      None  None   NaN   None  None  \n",
       "\n",
       "[2356 rows x 11 columns]"
      ]
     },
     "execution_count": 312,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "archive_clean"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #6: Differents inputs for the same categories \n",
    "<a id=\"6\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Dogs with no name in the description have given names of \"a\", \"an\"  and \"None\" instead of \"NaN\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace the value 'None' with NaN \n",
    "archive_clean =  archive_clean.replace('None', np.nan)\n",
    "archive_clean =  archive_clean.replace('a', np.nan)\n",
    "archive_clean =  archive_clean.replace('an', np.nan)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Charlie      12\n",
       "Cooper       11\n",
       "Lucy         11\n",
       "Oliver       11\n",
       "Tucker       10\n",
       "             ..\n",
       "old           1\n",
       "Asher         1\n",
       "Bookstore     1\n",
       "Steve         1\n",
       "Vinnie        1\n",
       "Name: name, Length: 954, dtype: int64"
      ]
     },
     "execution_count": 314,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for changes\n",
    "archive_clean.name.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #7: There are no delimitations for the rating demonimator\n",
    "<a id=\"7\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: In the column rating_denominator there are votes greater than 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Select only the values in the column rating_denominator that should only be \"10\"\n",
    "archive_clean.rating_denominator = archive_clean[archive_clean.rating_denominator == 10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>source</th>\n",
       "      <th>text</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floof</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01 16:23:56</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>13</td>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>2017-08-01 00:17:27</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>13</td>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>2017-07-31 00:18:03</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>12</td>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>Archie</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>2017-07-30 15:58:51</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>13</td>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>Darla</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>2017-07-29 16:00:24</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>12</td>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2351</th>\n",
       "      <td>666049248165822465</td>\n",
       "      <td>2015-11-16 00:24:50</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Here we have a 1949 1st generation vulpix. Enj...</td>\n",
       "      <td>5</td>\n",
       "      <td>666049248165822465</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2352</th>\n",
       "      <td>666044226329800704</td>\n",
       "      <td>2015-11-16 00:04:52</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is a purebred Piers Morgan. Loves to Netf...</td>\n",
       "      <td>6</td>\n",
       "      <td>666044226329800704</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2353</th>\n",
       "      <td>666033412701032449</td>\n",
       "      <td>2015-11-15 23:21:54</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Here is a very happy pup. Big fan of well-main...</td>\n",
       "      <td>9</td>\n",
       "      <td>666033412701032449</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2354</th>\n",
       "      <td>666029285002620928</td>\n",
       "      <td>2015-11-15 23:05:30</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>This is a western brown Mitsubishi terrier. Up...</td>\n",
       "      <td>7</td>\n",
       "      <td>666029285002620928</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2355</th>\n",
       "      <td>666020888022790149</td>\n",
       "      <td>2015-11-15 22:32:08</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>Here we have a Japanese Irish Setter. Lost eye...</td>\n",
       "      <td>8</td>\n",
       "      <td>666020888022790149</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2356 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                tweet_id           timestamp  \\\n",
       "0     892420643555336193 2017-08-01 16:23:56   \n",
       "1     892177421306343426 2017-08-01 00:17:27   \n",
       "2     891815181378084864 2017-07-31 00:18:03   \n",
       "3     891689557279858688 2017-07-30 15:58:51   \n",
       "4     891327558926688256 2017-07-29 16:00:24   \n",
       "...                  ...                 ...   \n",
       "2351  666049248165822465 2015-11-16 00:24:50   \n",
       "2352  666044226329800704 2015-11-16 00:04:52   \n",
       "2353  666033412701032449 2015-11-15 23:21:54   \n",
       "2354  666029285002620928 2015-11-15 23:05:30   \n",
       "2355  666020888022790149 2015-11-15 22:32:08   \n",
       "\n",
       "                                                 source  \\\n",
       "0     <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "1     <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2     <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "3     <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "4     <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "...                                                 ...   \n",
       "2351  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2352  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2353  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2354  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "2355  <a href=\"http://twitter.com/download/iphone\" r...   \n",
       "\n",
       "                                                   text  rating_numerator  \\\n",
       "0     This is Phineas. He's a mystical boy. Only eve...                13   \n",
       "1     This is Tilly. She's just checking pup on you....                13   \n",
       "2     This is Archie. He is a rare Norwegian Pouncin...                12   \n",
       "3     This is Darla. She commenced a snooze mid meal...                13   \n",
       "4     This is Franklin. He would like you to stop ca...                12   \n",
       "...                                                 ...               ...   \n",
       "2351  Here we have a 1949 1st generation vulpix. Enj...                 5   \n",
       "2352  This is a purebred Piers Morgan. Loves to Netf...                 6   \n",
       "2353  Here is a very happy pup. Big fan of well-main...                 9   \n",
       "2354  This is a western brown Mitsubishi terrier. Up...                 7   \n",
       "2355  Here we have a Japanese Irish Setter. Lost eye...                 8   \n",
       "\n",
       "      rating_denominator      name doggo floof pupper puppo  \n",
       "0     892420643555336193   Phineas   NaN   NaN    NaN   NaN  \n",
       "1     892177421306343426     Tilly   NaN   NaN    NaN   NaN  \n",
       "2     891815181378084864    Archie   NaN   NaN    NaN   NaN  \n",
       "3     891689557279858688     Darla   NaN   NaN    NaN   NaN  \n",
       "4     891327558926688256  Franklin   NaN   NaN    NaN   NaN  \n",
       "...                  ...       ...   ...   ...    ...   ...  \n",
       "2351  666049248165822465       NaN   NaN   NaN    NaN   NaN  \n",
       "2352  666044226329800704       NaN   NaN   NaN    NaN   NaN  \n",
       "2353  666033412701032449       NaN   NaN   NaN    NaN   NaN  \n",
       "2354  666029285002620928       NaN   NaN   NaN    NaN   NaN  \n",
       "2355  666020888022790149       NaN   NaN   NaN    NaN   NaN  \n",
       "\n",
       "[2356 rows x 11 columns]"
      ]
     },
     "execution_count": 316,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for changes\n",
    "archive_clean"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #8: Unnecessary columns\n",
    "<a id=\"8\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Drop unnecessary columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Use drop function to drop source column\n",
    "archive_clean.drop(columns='source', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>text</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floof</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01 16:23:56</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>13</td>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>2017-08-01 00:17:27</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>13</td>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>2017-07-31 00:18:03</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>12</td>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>Archie</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>2017-07-30 15:58:51</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>13</td>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>Darla</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>2017-07-29 16:00:24</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>12</td>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id           timestamp  \\\n",
       "0  892420643555336193 2017-08-01 16:23:56   \n",
       "1  892177421306343426 2017-08-01 00:17:27   \n",
       "2  891815181378084864 2017-07-31 00:18:03   \n",
       "3  891689557279858688 2017-07-30 15:58:51   \n",
       "4  891327558926688256 2017-07-29 16:00:24   \n",
       "\n",
       "                                                text  rating_numerator  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                13   \n",
       "1  This is Tilly. She's just checking pup on you....                13   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...                12   \n",
       "3  This is Darla. She commenced a snooze mid meal...                13   \n",
       "4  This is Franklin. He would like you to stop ca...                12   \n",
       "\n",
       "   rating_denominator      name doggo floof pupper puppo  \n",
       "0  892420643555336193   Phineas   NaN   NaN    NaN   NaN  \n",
       "1  892177421306343426     Tilly   NaN   NaN    NaN   NaN  \n",
       "2  891815181378084864    Archie   NaN   NaN    NaN   NaN  \n",
       "3  891689557279858688     Darla   NaN   NaN    NaN   NaN  \n",
       "4  891327558926688256  Franklin   NaN   NaN    NaN   NaN  "
      ]
     },
     "execution_count": 318,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for change \n",
    "archive_clean.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #9: Differents letter cases\n",
    "<a id=\"9\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: The types of dogs in columns p1, p2, and p3 have some lowercase and uppercase letters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Convert all the dogs names to lowercase letters\n",
    "predictions_clean['p1'] = predictions_clean['p1'].str.lower()\n",
    "predictions_clean['p2'] = predictions_clean['p2'].str.lower()\n",
    "predictions_clean['p3'] = predictions_clean['p3'].str.lower()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    welsh_springer_spaniel\n",
       "1                   redbone\n",
       "2           german_shepherd\n",
       "3       rhodesian_ridgeback\n",
       "4        miniature_pinscher\n",
       "Name: p1, dtype: object"
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for changes\n",
    "predictions_clean.p1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #10: Differents data type format\n",
    "<a id=\"10\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: The tweet_id field is in int64, should be in string format"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#change the dtype of column tweed_id from int64 to string format\n",
    "predictions_clean.tweet_id = predictions_clean.tweet_id.astype(str)\n",
    "tweets_clean.id = tweets_clean.id.astype(str)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2075 entries, 0 to 2074\n",
      "Data columns (total 12 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   tweet_id  2075 non-null   object \n",
      " 1   jpg_url   2075 non-null   object \n",
      " 2   img_num   2075 non-null   int64  \n",
      " 3   p1        2075 non-null   object \n",
      " 4   p1_conf   2075 non-null   float64\n",
      " 5   p1_dog    2075 non-null   bool   \n",
      " 6   p2        2075 non-null   object \n",
      " 7   p2_conf   2075 non-null   float64\n",
      " 8   p2_dog    2075 non-null   bool   \n",
      " 9   p3        2075 non-null   object \n",
      " 10  p3_conf   2075 non-null   float64\n",
      " 11  p3_dog    2075 non-null   bool   \n",
      "dtypes: bool(3), float64(3), int64(1), object(5)\n",
      "memory usage: 152.1+ KB\n"
     ]
    }
   ],
   "source": [
    "#Check for changes\n",
    "predictions_clean.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2327 entries, 0 to 2326\n",
      "Data columns (total 32 columns):\n",
      " #   Column                         Non-Null Count  Dtype              \n",
      "---  ------                         --------------  -----              \n",
      " 0   created_at                     2327 non-null   datetime64[ns, UTC]\n",
      " 1   id                             2327 non-null   object             \n",
      " 2   id_str                         2327 non-null   int64              \n",
      " 3   full_text                      2327 non-null   object             \n",
      " 4   truncated                      2327 non-null   bool               \n",
      " 5   display_text_range             2327 non-null   object             \n",
      " 6   entities                       2327 non-null   object             \n",
      " 7   extended_entities              2057 non-null   object             \n",
      " 8   source                         2327 non-null   object             \n",
      " 9   in_reply_to_status_id          77 non-null     float64            \n",
      " 10  in_reply_to_status_id_str      77 non-null     float64            \n",
      " 11  in_reply_to_user_id            77 non-null     float64            \n",
      " 12  in_reply_to_user_id_str        77 non-null     float64            \n",
      " 13  in_reply_to_screen_name        77 non-null     object             \n",
      " 14  user                           2327 non-null   object             \n",
      " 15  geo                            0 non-null      float64            \n",
      " 16  coordinates                    0 non-null      float64            \n",
      " 17  place                          1 non-null      object             \n",
      " 18  contributors                   0 non-null      float64            \n",
      " 19  is_quote_status                2327 non-null   bool               \n",
      " 20  retweet_count                  2327 non-null   int64              \n",
      " 21  favorite_count                 2327 non-null   int64              \n",
      " 22  favorited                      2327 non-null   bool               \n",
      " 23  retweeted                      2327 non-null   bool               \n",
      " 24  possibly_sensitive             2195 non-null   float64            \n",
      " 25  possibly_sensitive_appealable  2195 non-null   float64            \n",
      " 26  lang                           2327 non-null   object             \n",
      " 27  retweeted_status               160 non-null    object             \n",
      " 28  quoted_status_id               26 non-null     float64            \n",
      " 29  quoted_status_id_str           26 non-null     float64            \n",
      " 30  quoted_status_permalink        26 non-null     object             \n",
      " 31  quoted_status                  24 non-null     object             \n",
      "dtypes: bool(4), datetime64[ns, UTC](1), float64(11), int64(3), object(13)\n",
      "memory usage: 518.2+ KB\n"
     ]
    }
   ],
   "source": [
    "#Check for changes\n",
    "tweets_clean.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #11: Differents columns names for the same content\n",
    "<a id=\"11\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Rename the column 'id' to 'tweet_id' to facilitate merging"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Use rename() function to rename the column\n",
    "tweets_clean = tweets_clean.rename(columns={'id':'tweet_id'})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>created_at</th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>id_str</th>\n",
       "      <th>full_text</th>\n",
       "      <th>truncated</th>\n",
       "      <th>display_text_range</th>\n",
       "      <th>entities</th>\n",
       "      <th>extended_entities</th>\n",
       "      <th>source</th>\n",
       "      <th>in_reply_to_status_id</th>\n",
       "      <th>...</th>\n",
       "      <th>favorited</th>\n",
       "      <th>retweeted</th>\n",
       "      <th>possibly_sensitive</th>\n",
       "      <th>possibly_sensitive_appealable</th>\n",
       "      <th>lang</th>\n",
       "      <th>retweeted_status</th>\n",
       "      <th>quoted_status_id</th>\n",
       "      <th>quoted_status_id_str</th>\n",
       "      <th>quoted_status_permalink</th>\n",
       "      <th>quoted_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-08-01 16:23:56+00:00</td>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>892420643555336192</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>False</td>\n",
       "      <td>[0, 85]</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'media': [{'id': 892420639486877696, 'id_str'...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-08-01 00:17:27+00:00</td>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>892177421306343424</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>False</td>\n",
       "      <td>[0, 138]</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'media': [{'id': 892177413194625024, 'id_str'...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-07-31 00:18:03+00:00</td>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>False</td>\n",
       "      <td>[0, 121]</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'media': [{'id': 891815175371796480, 'id_str'...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-07-30 15:58:51+00:00</td>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>False</td>\n",
       "      <td>[0, 79]</td>\n",
       "      <td>{'hashtags': [], 'symbols': [], 'user_mentions...</td>\n",
       "      <td>{'media': [{'id': 891689552724799489, 'id_str'...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-07-29 16:00:24+00:00</td>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>False</td>\n",
       "      <td>[0, 138]</td>\n",
       "      <td>{'hashtags': [{'text': 'BarkWeek', 'indices': ...</td>\n",
       "      <td>{'media': [{'id': 891327551943041024, 'id_str'...</td>\n",
       "      <td>&lt;a href=\"http://twitter.com/download/iphone\" r...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 created_at            tweet_id              id_str  \\\n",
       "0 2017-08-01 16:23:56+00:00  892420643555336193  892420643555336192   \n",
       "1 2017-08-01 00:17:27+00:00  892177421306343426  892177421306343424   \n",
       "2 2017-07-31 00:18:03+00:00  891815181378084864  891815181378084864   \n",
       "3 2017-07-30 15:58:51+00:00  891689557279858688  891689557279858688   \n",
       "4 2017-07-29 16:00:24+00:00  891327558926688256  891327558926688256   \n",
       "\n",
       "                                           full_text  truncated  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...      False   \n",
       "1  This is Tilly. She's just checking pup on you....      False   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...      False   \n",
       "3  This is Darla. She commenced a snooze mid meal...      False   \n",
       "4  This is Franklin. He would like you to stop ca...      False   \n",
       "\n",
       "  display_text_range                                           entities  \\\n",
       "0            [0, 85]  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "1           [0, 138]  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "2           [0, 121]  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "3            [0, 79]  {'hashtags': [], 'symbols': [], 'user_mentions...   \n",
       "4           [0, 138]  {'hashtags': [{'text': 'BarkWeek', 'indices': ...   \n",
       "\n",
       "                                   extended_entities  \\\n",
       "0  {'media': [{'id': 892420639486877696, 'id_str'...   \n",
       "1  {'media': [{'id': 892177413194625024, 'id_str'...   \n",
       "2  {'media': [{'id': 891815175371796480, 'id_str'...   \n",
       "3  {'media': [{'id': 891689552724799489, 'id_str'...   \n",
       "4  {'media': [{'id': 891327551943041024, 'id_str'...   \n",
       "\n",
       "                                              source  in_reply_to_status_id  \\\n",
       "0  <a href=\"http://twitter.com/download/iphone\" r...                    NaN   \n",
       "1  <a href=\"http://twitter.com/download/iphone\" r...                    NaN   \n",
       "2  <a href=\"http://twitter.com/download/iphone\" r...                    NaN   \n",
       "3  <a href=\"http://twitter.com/download/iphone\" r...                    NaN   \n",
       "4  <a href=\"http://twitter.com/download/iphone\" r...                    NaN   \n",
       "\n",
       "   ...  favorited  retweeted  possibly_sensitive  \\\n",
       "0  ...      False      False                 0.0   \n",
       "1  ...      False      False                 0.0   \n",
       "2  ...      False      False                 0.0   \n",
       "3  ...      False      False                 0.0   \n",
       "4  ...      False      False                 0.0   \n",
       "\n",
       "  possibly_sensitive_appealable lang  retweeted_status  quoted_status_id  \\\n",
       "0                           0.0   en               NaN               NaN   \n",
       "1                           0.0   en               NaN               NaN   \n",
       "2                           0.0   en               NaN               NaN   \n",
       "3                           0.0   en               NaN               NaN   \n",
       "4                           0.0   en               NaN               NaN   \n",
       "\n",
       "  quoted_status_id_str  quoted_status_permalink  quoted_status  \n",
       "0                  NaN                      NaN            NaN  \n",
       "1                  NaN                      NaN            NaN  \n",
       "2                  NaN                      NaN            NaN  \n",
       "3                  NaN                      NaN            NaN  \n",
       "4                  NaN                      NaN            NaN  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 325,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for changes\n",
    "tweets_clean.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #12: Column Text has multiples variables\n",
    "<a id=\"12\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Clean up text column to show only the text"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-326-1a7db23b574b>:2: FutureWarning: The default value of regex will change from True to False in a future version.\n",
      "  archive_clean['text'] = archive_clean.text.str.replace(r\"http\\S+\", \"\")\n"
     ]
    }
   ],
   "source": [
    "#Remove url link\n",
    "archive_clean['text'] = archive_clean.text.str.replace(r\"http\\S+\", \"\")\n",
    "archive_clean['text'] = archive_clean.text.str.strip()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"This is Phineas. He's a mystical boy. Only ever appears in the hole of a donut. 13/10\""
      ]
     },
     "execution_count": 327,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "archive_clean['text'][0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tidiness issues"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #1:  Unify the dogs classes\n",
    "<a id=\"a\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Several columns representing the same category, which is divided into \"doggo\", \"flooter\", \"pupper\", \"puppo\" columns, but we need only one column to represent this classifications"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Use loc function to add a new column to represent the dog stage \n",
    "archive_clean.loc[archive_clean['doggo'] == 'doggo', 'stage'] = 'doggo'\n",
    "archive_clean.loc[archive_clean['floof'] == 'floof', 'stage'] = 'floof'\n",
    "archive_clean.loc[archive_clean['pupper'] == 'pupper', 'stage'] = 'pupper'\n",
    "archive_clean.loc[archive_clean['puppo'] == 'puppo', 'stage'] = 'puppo'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>text</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>doggo</th>\n",
       "      <th>floof</th>\n",
       "      <th>pupper</th>\n",
       "      <th>puppo</th>\n",
       "      <th>stage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01 16:23:56</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>13</td>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>2017-08-01 00:17:27</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>13</td>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>2017-07-31 00:18:03</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>12</td>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>Archie</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>2017-07-30 15:58:51</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>13</td>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>Darla</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>2017-07-29 16:00:24</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>12</td>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id           timestamp  \\\n",
       "0  892420643555336193 2017-08-01 16:23:56   \n",
       "1  892177421306343426 2017-08-01 00:17:27   \n",
       "2  891815181378084864 2017-07-31 00:18:03   \n",
       "3  891689557279858688 2017-07-30 15:58:51   \n",
       "4  891327558926688256 2017-07-29 16:00:24   \n",
       "\n",
       "                                                text  rating_numerator  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                13   \n",
       "1  This is Tilly. She's just checking pup on you....                13   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...                12   \n",
       "3  This is Darla. She commenced a snooze mid meal...                13   \n",
       "4  This is Franklin. He would like you to stop ca...                12   \n",
       "\n",
       "   rating_denominator      name doggo floof pupper puppo stage  \n",
       "0  892420643555336193   Phineas   NaN   NaN    NaN   NaN   NaN  \n",
       "1  892177421306343426     Tilly   NaN   NaN    NaN   NaN   NaN  \n",
       "2  891815181378084864    Archie   NaN   NaN    NaN   NaN   NaN  \n",
       "3  891689557279858688     Darla   NaN   NaN    NaN   NaN   NaN  \n",
       "4  891327558926688256  Franklin   NaN   NaN    NaN   NaN   NaN  "
      ]
     },
     "execution_count": 329,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for changes\n",
    "archive_clean.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dropping the columns: doggo, floofer, pupper and poppo\n",
    "archive_clean = archive_clean.drop(['doggo', 'floof', 'pupper', 'puppo'], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2356 entries, 0 to 2355\n",
      "Data columns (total 7 columns):\n",
      " #   Column              Non-Null Count  Dtype         \n",
      "---  ------              --------------  -----         \n",
      " 0   tweet_id            2356 non-null   object        \n",
      " 1   timestamp           2356 non-null   datetime64[ns]\n",
      " 2   text                2356 non-null   object        \n",
      " 3   rating_numerator    2356 non-null   int64         \n",
      " 4   rating_denominator  2333 non-null   object        \n",
      " 5   name                1549 non-null   object        \n",
      " 6   stage               380 non-null    object        \n",
      "dtypes: datetime64[ns](1), int64(1), object(5)\n",
      "memory usage: 129.0+ KB\n"
     ]
    }
   ],
   "source": [
    "#Check the final change in the dogs stages\n",
    "archive_clean.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Issue #2: Separated tables\n",
    "<a id=\"b\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define: Merge all tables to realize any analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>text</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>stage</th>\n",
       "      <th>created_at</th>\n",
       "      <th>id_str</th>\n",
       "      <th>full_text</th>\n",
       "      <th>...</th>\n",
       "      <th>favorited</th>\n",
       "      <th>retweeted</th>\n",
       "      <th>possibly_sensitive</th>\n",
       "      <th>possibly_sensitive_appealable</th>\n",
       "      <th>lang</th>\n",
       "      <th>retweeted_status</th>\n",
       "      <th>quoted_status_id</th>\n",
       "      <th>quoted_status_id_str</th>\n",
       "      <th>quoted_status_permalink</th>\n",
       "      <th>quoted_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01 16:23:56</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>13</td>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-01 16:23:56+00:00</td>\n",
       "      <td>8.924206e+17</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>2017-08-01 00:17:27</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>13</td>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-01 00:17:27+00:00</td>\n",
       "      <td>8.921774e+17</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>2017-07-31 00:18:03</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>12</td>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>Archie</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-31 00:18:03+00:00</td>\n",
       "      <td>8.918152e+17</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>2017-07-30 15:58:51</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>13</td>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>Darla</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-30 15:58:51+00:00</td>\n",
       "      <td>8.916896e+17</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>2017-07-29 16:00:24</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>12</td>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-29 16:00:24+00:00</td>\n",
       "      <td>8.913276e+17</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>en</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 38 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id           timestamp  \\\n",
       "0  892420643555336193 2017-08-01 16:23:56   \n",
       "1  892177421306343426 2017-08-01 00:17:27   \n",
       "2  891815181378084864 2017-07-31 00:18:03   \n",
       "3  891689557279858688 2017-07-30 15:58:51   \n",
       "4  891327558926688256 2017-07-29 16:00:24   \n",
       "\n",
       "                                                text  rating_numerator  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                13   \n",
       "1  This is Tilly. She's just checking pup on you....                13   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...                12   \n",
       "3  This is Darla. She commenced a snooze mid meal...                13   \n",
       "4  This is Franklin. He would like you to stop ca...                12   \n",
       "\n",
       "   rating_denominator      name stage                created_at        id_str  \\\n",
       "0  892420643555336193   Phineas   NaN 2017-08-01 16:23:56+00:00  8.924206e+17   \n",
       "1  892177421306343426     Tilly   NaN 2017-08-01 00:17:27+00:00  8.921774e+17   \n",
       "2  891815181378084864    Archie   NaN 2017-07-31 00:18:03+00:00  8.918152e+17   \n",
       "3  891689557279858688     Darla   NaN 2017-07-30 15:58:51+00:00  8.916896e+17   \n",
       "4  891327558926688256  Franklin   NaN 2017-07-29 16:00:24+00:00  8.913276e+17   \n",
       "\n",
       "                                           full_text  ... favorited retweeted  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...  ...     False     False   \n",
       "1  This is Tilly. She's just checking pup on you....  ...     False     False   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...  ...     False     False   \n",
       "3  This is Darla. She commenced a snooze mid meal...  ...     False     False   \n",
       "4  This is Franklin. He would like you to stop ca...  ...     False     False   \n",
       "\n",
       "  possibly_sensitive possibly_sensitive_appealable lang  retweeted_status  \\\n",
       "0                0.0                           0.0   en               NaN   \n",
       "1                0.0                           0.0   en               NaN   \n",
       "2                0.0                           0.0   en               NaN   \n",
       "3                0.0                           0.0   en               NaN   \n",
       "4                0.0                           0.0   en               NaN   \n",
       "\n",
       "   quoted_status_id  quoted_status_id_str  quoted_status_permalink  \\\n",
       "0               NaN                   NaN                      NaN   \n",
       "1               NaN                   NaN                      NaN   \n",
       "2               NaN                   NaN                      NaN   \n",
       "3               NaN                   NaN                      NaN   \n",
       "4               NaN                   NaN                      NaN   \n",
       "\n",
       "  quoted_status  \n",
       "0           NaN  \n",
       "1           NaN  \n",
       "2           NaN  \n",
       "3           NaN  \n",
       "4           NaN  \n",
       "\n",
       "[5 rows x 38 columns]"
      ]
     },
     "execution_count": 332,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Merge the archive_clean and tweets_clean table\n",
    "merge_df = archive_clean.join(tweets_clean.set_index('tweet_id'), on='tweet_id')\n",
    "merge_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2356 entries, 0 to 2355\n",
      "Data columns (total 38 columns):\n",
      " #   Column                         Non-Null Count  Dtype              \n",
      "---  ------                         --------------  -----              \n",
      " 0   tweet_id                       2356 non-null   object             \n",
      " 1   timestamp                      2356 non-null   datetime64[ns]     \n",
      " 2   text                           2356 non-null   object             \n",
      " 3   rating_numerator               2356 non-null   int64              \n",
      " 4   rating_denominator             2333 non-null   object             \n",
      " 5   name                           1549 non-null   object             \n",
      " 6   stage                          380 non-null    object             \n",
      " 7   created_at                     2327 non-null   datetime64[ns, UTC]\n",
      " 8   id_str                         2327 non-null   float64            \n",
      " 9   full_text                      2327 non-null   object             \n",
      " 10  truncated                      2327 non-null   object             \n",
      " 11  display_text_range             2327 non-null   object             \n",
      " 12  entities                       2327 non-null   object             \n",
      " 13  extended_entities              2057 non-null   object             \n",
      " 14  source                         2327 non-null   object             \n",
      " 15  in_reply_to_status_id          77 non-null     float64            \n",
      " 16  in_reply_to_status_id_str      77 non-null     float64            \n",
      " 17  in_reply_to_user_id            77 non-null     float64            \n",
      " 18  in_reply_to_user_id_str        77 non-null     float64            \n",
      " 19  in_reply_to_screen_name        77 non-null     object             \n",
      " 20  user                           2327 non-null   object             \n",
      " 21  geo                            0 non-null      float64            \n",
      " 22  coordinates                    0 non-null      float64            \n",
      " 23  place                          1 non-null      object             \n",
      " 24  contributors                   0 non-null      float64            \n",
      " 25  is_quote_status                2327 non-null   object             \n",
      " 26  retweet_count                  2327 non-null   float64            \n",
      " 27  favorite_count                 2327 non-null   float64            \n",
      " 28  favorited                      2327 non-null   object             \n",
      " 29  retweeted                      2327 non-null   object             \n",
      " 30  possibly_sensitive             2195 non-null   float64            \n",
      " 31  possibly_sensitive_appealable  2195 non-null   float64            \n",
      " 32  lang                           2327 non-null   object             \n",
      " 33  retweeted_status               160 non-null    object             \n",
      " 34  quoted_status_id               26 non-null     float64            \n",
      " 35  quoted_status_id_str           26 non-null     float64            \n",
      " 36  quoted_status_permalink        26 non-null     object             \n",
      " 37  quoted_status                  24 non-null     object             \n",
      "dtypes: datetime64[ns, UTC](1), datetime64[ns](1), float64(14), int64(1), object(21)\n",
      "memory usage: 699.6+ KB\n"
     ]
    }
   ],
   "source": [
    "#Check the new df\n",
    "merge_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>text</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>stage</th>\n",
       "      <th>created_at</th>\n",
       "      <th>id_str</th>\n",
       "      <th>full_text</th>\n",
       "      <th>...</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p1_dog</th>\n",
       "      <th>p2</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p2_dog</th>\n",
       "      <th>p3</th>\n",
       "      <th>p3_conf</th>\n",
       "      <th>p3_dog</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01 16:23:56</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>13</td>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-01 16:23:56+00:00</td>\n",
       "      <td>8.924206e+17</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>orange</td>\n",
       "      <td>0.097049</td>\n",
       "      <td>False</td>\n",
       "      <td>bagel</td>\n",
       "      <td>0.085851</td>\n",
       "      <td>False</td>\n",
       "      <td>banana</td>\n",
       "      <td>0.076110</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>2017-08-01 00:17:27</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>13</td>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-08-01 00:17:27+00:00</td>\n",
       "      <td>8.921774e+17</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>chihuahua</td>\n",
       "      <td>0.323581</td>\n",
       "      <td>True</td>\n",
       "      <td>pekinese</td>\n",
       "      <td>0.090647</td>\n",
       "      <td>True</td>\n",
       "      <td>papillon</td>\n",
       "      <td>0.068957</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>2017-07-31 00:18:03</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>12</td>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>Archie</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-31 00:18:03+00:00</td>\n",
       "      <td>8.918152e+17</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>chihuahua</td>\n",
       "      <td>0.716012</td>\n",
       "      <td>True</td>\n",
       "      <td>malamute</td>\n",
       "      <td>0.078253</td>\n",
       "      <td>True</td>\n",
       "      <td>kelpie</td>\n",
       "      <td>0.031379</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>2017-07-30 15:58:51</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>13</td>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>Darla</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-30 15:58:51+00:00</td>\n",
       "      <td>8.916896e+17</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>paper_towel</td>\n",
       "      <td>0.170278</td>\n",
       "      <td>False</td>\n",
       "      <td>labrador_retriever</td>\n",
       "      <td>0.168086</td>\n",
       "      <td>True</td>\n",
       "      <td>spatula</td>\n",
       "      <td>0.040836</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>2017-07-29 16:00:24</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>12</td>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2017-07-29 16:00:24+00:00</td>\n",
       "      <td>8.913276e+17</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>basset</td>\n",
       "      <td>0.555712</td>\n",
       "      <td>True</td>\n",
       "      <td>english_springer</td>\n",
       "      <td>0.225770</td>\n",
       "      <td>True</td>\n",
       "      <td>german_short-haired_pointer</td>\n",
       "      <td>0.175219</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 49 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id           timestamp  \\\n",
       "0  892420643555336193 2017-08-01 16:23:56   \n",
       "1  892177421306343426 2017-08-01 00:17:27   \n",
       "2  891815181378084864 2017-07-31 00:18:03   \n",
       "3  891689557279858688 2017-07-30 15:58:51   \n",
       "4  891327558926688256 2017-07-29 16:00:24   \n",
       "\n",
       "                                                text  rating_numerator  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                13   \n",
       "1  This is Tilly. She's just checking pup on you....                13   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...                12   \n",
       "3  This is Darla. She commenced a snooze mid meal...                13   \n",
       "4  This is Franklin. He would like you to stop ca...                12   \n",
       "\n",
       "   rating_denominator      name stage                created_at        id_str  \\\n",
       "0  892420643555336193   Phineas   NaN 2017-08-01 16:23:56+00:00  8.924206e+17   \n",
       "1  892177421306343426     Tilly   NaN 2017-08-01 00:17:27+00:00  8.921774e+17   \n",
       "2  891815181378084864    Archie   NaN 2017-07-31 00:18:03+00:00  8.918152e+17   \n",
       "3  891689557279858688     Darla   NaN 2017-07-30 15:58:51+00:00  8.916896e+17   \n",
       "4  891327558926688256  Franklin   NaN 2017-07-29 16:00:24+00:00  8.913276e+17   \n",
       "\n",
       "                                           full_text  ... img_num  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...  ...     1.0   \n",
       "1  This is Tilly. She's just checking pup on you....  ...     1.0   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...  ...     1.0   \n",
       "3  This is Darla. She commenced a snooze mid meal...  ...     1.0   \n",
       "4  This is Franklin. He would like you to stop ca...  ...     2.0   \n",
       "\n",
       "            p1   p1_conf p1_dog                  p2   p2_conf  p2_dog  \\\n",
       "0       orange  0.097049  False               bagel  0.085851   False   \n",
       "1    chihuahua  0.323581   True            pekinese  0.090647    True   \n",
       "2    chihuahua  0.716012   True            malamute  0.078253    True   \n",
       "3  paper_towel  0.170278  False  labrador_retriever  0.168086    True   \n",
       "4       basset  0.555712   True    english_springer  0.225770    True   \n",
       "\n",
       "                            p3   p3_conf p3_dog  \n",
       "0                       banana  0.076110  False  \n",
       "1                     papillon  0.068957   True  \n",
       "2                       kelpie  0.031379   True  \n",
       "3                      spatula  0.040836  False  \n",
       "4  german_short-haired_pointer  0.175219   True  \n",
       "\n",
       "[5 rows x 49 columns]"
      ]
     },
     "execution_count": 334,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Join the merge_df to the predictions_clean table\n",
    "twitter_master = merge_df.join(predictions_clean.set_index('tweet_id'), on='tweet_id')\n",
    "twitter_master.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2356 entries, 0 to 2355\n",
      "Data columns (total 49 columns):\n",
      " #   Column                         Non-Null Count  Dtype              \n",
      "---  ------                         --------------  -----              \n",
      " 0   tweet_id                       2356 non-null   object             \n",
      " 1   timestamp                      2356 non-null   datetime64[ns]     \n",
      " 2   text                           2356 non-null   object             \n",
      " 3   rating_numerator               2356 non-null   int64              \n",
      " 4   rating_denominator             2333 non-null   object             \n",
      " 5   name                           1549 non-null   object             \n",
      " 6   stage                          380 non-null    object             \n",
      " 7   created_at                     2327 non-null   datetime64[ns, UTC]\n",
      " 8   id_str                         2327 non-null   float64            \n",
      " 9   full_text                      2327 non-null   object             \n",
      " 10  truncated                      2327 non-null   object             \n",
      " 11  display_text_range             2327 non-null   object             \n",
      " 12  entities                       2327 non-null   object             \n",
      " 13  extended_entities              2057 non-null   object             \n",
      " 14  source                         2327 non-null   object             \n",
      " 15  in_reply_to_status_id          77 non-null     float64            \n",
      " 16  in_reply_to_status_id_str      77 non-null     float64            \n",
      " 17  in_reply_to_user_id            77 non-null     float64            \n",
      " 18  in_reply_to_user_id_str        77 non-null     float64            \n",
      " 19  in_reply_to_screen_name        77 non-null     object             \n",
      " 20  user                           2327 non-null   object             \n",
      " 21  geo                            0 non-null      float64            \n",
      " 22  coordinates                    0 non-null      float64            \n",
      " 23  place                          1 non-null      object             \n",
      " 24  contributors                   0 non-null      float64            \n",
      " 25  is_quote_status                2327 non-null   object             \n",
      " 26  retweet_count                  2327 non-null   float64            \n",
      " 27  favorite_count                 2327 non-null   float64            \n",
      " 28  favorited                      2327 non-null   object             \n",
      " 29  retweeted                      2327 non-null   object             \n",
      " 30  possibly_sensitive             2195 non-null   float64            \n",
      " 31  possibly_sensitive_appealable  2195 non-null   float64            \n",
      " 32  lang                           2327 non-null   object             \n",
      " 33  retweeted_status               160 non-null    object             \n",
      " 34  quoted_status_id               26 non-null     float64            \n",
      " 35  quoted_status_id_str           26 non-null     float64            \n",
      " 36  quoted_status_permalink        26 non-null     object             \n",
      " 37  quoted_status                  24 non-null     object             \n",
      " 38  jpg_url                        2075 non-null   object             \n",
      " 39  img_num                        2075 non-null   float64            \n",
      " 40  p1                             2075 non-null   object             \n",
      " 41  p1_conf                        2075 non-null   float64            \n",
      " 42  p1_dog                         2075 non-null   object             \n",
      " 43  p2                             2075 non-null   object             \n",
      " 44  p2_conf                        2075 non-null   float64            \n",
      " 45  p2_dog                         2075 non-null   object             \n",
      " 46  p3                             2075 non-null   object             \n",
      " 47  p3_conf                        2075 non-null   float64            \n",
      " 48  p3_dog                         2075 non-null   object             \n",
      "dtypes: datetime64[ns, UTC](1), datetime64[ns](1), float64(18), int64(1), object(28)\n",
      "memory usage: 902.0+ KB\n"
     ]
    }
   ],
   "source": [
    "twitter_master.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>text</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>stage</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>jpg_url</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p1_dog</th>\n",
       "      <th>p2</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p2_dog</th>\n",
       "      <th>p3</th>\n",
       "      <th>p3_conf</th>\n",
       "      <th>p3_dog</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>2017-08-01 16:23:56</td>\n",
       "      <td>This is Phineas. He's a mystical boy. Only eve...</td>\n",
       "      <td>13</td>\n",
       "      <td>892420643555336193</td>\n",
       "      <td>Phineas</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7167.0</td>\n",
       "      <td>34466.0</td>\n",
       "      <td>https://pbs.twimg.com/media/DGKD1-bXoAAIAUK.jpg</td>\n",
       "      <td>1.0</td>\n",
       "      <td>orange</td>\n",
       "      <td>0.097049</td>\n",
       "      <td>False</td>\n",
       "      <td>bagel</td>\n",
       "      <td>0.085851</td>\n",
       "      <td>False</td>\n",
       "      <td>banana</td>\n",
       "      <td>0.076110</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>2017-08-01 00:17:27</td>\n",
       "      <td>This is Tilly. She's just checking pup on you....</td>\n",
       "      <td>13</td>\n",
       "      <td>892177421306343426</td>\n",
       "      <td>Tilly</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5387.0</td>\n",
       "      <td>29874.0</td>\n",
       "      <td>https://pbs.twimg.com/media/DGGmoV4XsAAUL6n.jpg</td>\n",
       "      <td>1.0</td>\n",
       "      <td>chihuahua</td>\n",
       "      <td>0.323581</td>\n",
       "      <td>True</td>\n",
       "      <td>pekinese</td>\n",
       "      <td>0.090647</td>\n",
       "      <td>True</td>\n",
       "      <td>papillon</td>\n",
       "      <td>0.068957</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>2017-07-31 00:18:03</td>\n",
       "      <td>This is Archie. He is a rare Norwegian Pouncin...</td>\n",
       "      <td>12</td>\n",
       "      <td>891815181378084864</td>\n",
       "      <td>Archie</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3552.0</td>\n",
       "      <td>22496.0</td>\n",
       "      <td>https://pbs.twimg.com/media/DGBdLU1WsAANxJ9.jpg</td>\n",
       "      <td>1.0</td>\n",
       "      <td>chihuahua</td>\n",
       "      <td>0.716012</td>\n",
       "      <td>True</td>\n",
       "      <td>malamute</td>\n",
       "      <td>0.078253</td>\n",
       "      <td>True</td>\n",
       "      <td>kelpie</td>\n",
       "      <td>0.031379</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>2017-07-30 15:58:51</td>\n",
       "      <td>This is Darla. She commenced a snooze mid meal...</td>\n",
       "      <td>13</td>\n",
       "      <td>891689557279858688</td>\n",
       "      <td>Darla</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7386.0</td>\n",
       "      <td>37677.0</td>\n",
       "      <td>https://pbs.twimg.com/media/DF_q7IAWsAEuuN8.jpg</td>\n",
       "      <td>1.0</td>\n",
       "      <td>paper_towel</td>\n",
       "      <td>0.170278</td>\n",
       "      <td>False</td>\n",
       "      <td>labrador_retriever</td>\n",
       "      <td>0.168086</td>\n",
       "      <td>True</td>\n",
       "      <td>spatula</td>\n",
       "      <td>0.040836</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>2017-07-29 16:00:24</td>\n",
       "      <td>This is Franklin. He would like you to stop ca...</td>\n",
       "      <td>12</td>\n",
       "      <td>891327558926688256</td>\n",
       "      <td>Franklin</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7923.0</td>\n",
       "      <td>35990.0</td>\n",
       "      <td>https://pbs.twimg.com/media/DF6hr6BUMAAzZgT.jpg</td>\n",
       "      <td>2.0</td>\n",
       "      <td>basset</td>\n",
       "      <td>0.555712</td>\n",
       "      <td>True</td>\n",
       "      <td>english_springer</td>\n",
       "      <td>0.225770</td>\n",
       "      <td>True</td>\n",
       "      <td>german_short-haired_pointer</td>\n",
       "      <td>0.175219</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id           timestamp  \\\n",
       "0  892420643555336193 2017-08-01 16:23:56   \n",
       "1  892177421306343426 2017-08-01 00:17:27   \n",
       "2  891815181378084864 2017-07-31 00:18:03   \n",
       "3  891689557279858688 2017-07-30 15:58:51   \n",
       "4  891327558926688256 2017-07-29 16:00:24   \n",
       "\n",
       "                                                text  rating_numerator  \\\n",
       "0  This is Phineas. He's a mystical boy. Only eve...                13   \n",
       "1  This is Tilly. She's just checking pup on you....                13   \n",
       "2  This is Archie. He is a rare Norwegian Pouncin...                12   \n",
       "3  This is Darla. She commenced a snooze mid meal...                13   \n",
       "4  This is Franklin. He would like you to stop ca...                12   \n",
       "\n",
       "   rating_denominator      name stage  retweet_count  favorite_count  \\\n",
       "0  892420643555336193   Phineas   NaN         7167.0         34466.0   \n",
       "1  892177421306343426     Tilly   NaN         5387.0         29874.0   \n",
       "2  891815181378084864    Archie   NaN         3552.0         22496.0   \n",
       "3  891689557279858688     Darla   NaN         7386.0         37677.0   \n",
       "4  891327558926688256  Franklin   NaN         7923.0         35990.0   \n",
       "\n",
       "                                           jpg_url  img_num           p1  \\\n",
       "0  https://pbs.twimg.com/media/DGKD1-bXoAAIAUK.jpg      1.0       orange   \n",
       "1  https://pbs.twimg.com/media/DGGmoV4XsAAUL6n.jpg      1.0    chihuahua   \n",
       "2  https://pbs.twimg.com/media/DGBdLU1WsAANxJ9.jpg      1.0    chihuahua   \n",
       "3  https://pbs.twimg.com/media/DF_q7IAWsAEuuN8.jpg      1.0  paper_towel   \n",
       "4  https://pbs.twimg.com/media/DF6hr6BUMAAzZgT.jpg      2.0       basset   \n",
       "\n",
       "    p1_conf p1_dog                  p2   p2_conf p2_dog  \\\n",
       "0  0.097049  False               bagel  0.085851  False   \n",
       "1  0.323581   True            pekinese  0.090647   True   \n",
       "2  0.716012   True            malamute  0.078253   True   \n",
       "3  0.170278  False  labrador_retriever  0.168086   True   \n",
       "4  0.555712   True    english_springer  0.225770   True   \n",
       "\n",
       "                            p3   p3_conf p3_dog  \n",
       "0                       banana  0.076110  False  \n",
       "1                     papillon  0.068957   True  \n",
       "2                       kelpie  0.031379   True  \n",
       "3                      spatula  0.040836  False  \n",
       "4  german_short-haired_pointer  0.175219   True  "
      ]
     },
     "execution_count": 336,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Filter the columns to further analisys\n",
    "twitter_master_clean = twitter_master.filter(['tweet_id','timestamp','text', 'rating_numerator', 'rating_denominator','name','stage','retweet_count', 'favorite_count', 'jpg_url','img_num', 'p1', 'p1_conf','p1_dog', 'p2', 'p2_conf', 'p2_dog', 'p3', 'p3_conf', 'p3_dog'])\n",
    "twitter_master_clean.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Storing Data\n",
    "Save gathered, assessed, and cleaned master dataset to a CSV file named \"twitter_archive_master.csv\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 337,
   "metadata": {},
   "outputs": [],
   "source": [
    "#store data with to_csv function\n",
    "twitter_master_clean.to_csv('twitter_archive_master.csv', index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analyzing and Visualizing Data\n",
    "In this section, analyze and visualize your wrangled data. You must produce at least **three (3) insights and one (1) visualization.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 338,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Make a copy\n",
    "rate_dogs = twitter_master_clean.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2356 entries, 0 to 2355\n",
      "Data columns (total 20 columns):\n",
      " #   Column              Non-Null Count  Dtype         \n",
      "---  ------              --------------  -----         \n",
      " 0   tweet_id            2356 non-null   object        \n",
      " 1   timestamp           2356 non-null   datetime64[ns]\n",
      " 2   text                2356 non-null   object        \n",
      " 3   rating_numerator    2356 non-null   int64         \n",
      " 4   rating_denominator  2333 non-null   object        \n",
      " 5   name                1549 non-null   object        \n",
      " 6   stage               380 non-null    object        \n",
      " 7   retweet_count       2327 non-null   float64       \n",
      " 8   favorite_count      2327 non-null   float64       \n",
      " 9   jpg_url             2075 non-null   object        \n",
      " 10  img_num             2075 non-null   float64       \n",
      " 11  p1                  2075 non-null   object        \n",
      " 12  p1_conf             2075 non-null   float64       \n",
      " 13  p1_dog              2075 non-null   object        \n",
      " 14  p2                  2075 non-null   object        \n",
      " 15  p2_conf             2075 non-null   float64       \n",
      " 16  p2_dog              2075 non-null   object        \n",
      " 17  p3                  2075 non-null   object        \n",
      " 18  p3_conf             2075 non-null   float64       \n",
      " 19  p3_dog              2075 non-null   object        \n",
      "dtypes: datetime64[ns](1), float64(6), int64(1), object(12)\n",
      "memory usage: 368.2+ KB\n"
     ]
    }
   ],
   "source": [
    "rate_dogs.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Int64Index([  19,   95,  101,  104,  118,  132,  155,  182,  185,  211,  247,\n",
       "             253,  260,  296,  298,  363,  382,  506,  566,  750,  784,  815,\n",
       "             818,  841,  887,  890,  911,  932, 1726],\n",
       "           dtype='int64')"
      ]
     },
     "execution_count": 340,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Select missing values from table merged to drop later\n",
    "drop = rate_dogs[pd.isnull(rate_dogs['retweet_count'])].index\n",
    "\n",
    "drop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#Drop missing data from merged table\n",
    "rate_dogs.drop(index=drop, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2327 entries, 0 to 2355\n",
      "Data columns (total 20 columns):\n",
      " #   Column              Non-Null Count  Dtype         \n",
      "---  ------              --------------  -----         \n",
      " 0   tweet_id            2327 non-null   object        \n",
      " 1   timestamp           2327 non-null   datetime64[ns]\n",
      " 2   text                2327 non-null   object        \n",
      " 3   rating_numerator    2327 non-null   int64         \n",
      " 4   rating_denominator  2305 non-null   object        \n",
      " 5   name                1533 non-null   object        \n",
      " 6   stage               374 non-null    object        \n",
      " 7   retweet_count       2327 non-null   float64       \n",
      " 8   favorite_count      2327 non-null   float64       \n",
      " 9   jpg_url             2057 non-null   object        \n",
      " 10  img_num             2057 non-null   float64       \n",
      " 11  p1                  2057 non-null   object        \n",
      " 12  p1_conf             2057 non-null   float64       \n",
      " 13  p1_dog              2057 non-null   object        \n",
      " 14  p2                  2057 non-null   object        \n",
      " 15  p2_conf             2057 non-null   float64       \n",
      " 16  p2_dog              2057 non-null   object        \n",
      " 17  p3                  2057 non-null   object        \n",
      " 18  p3_conf             2057 non-null   float64       \n",
      " 19  p3_dog              2057 non-null   object        \n",
      "dtypes: datetime64[ns](1), float64(6), int64(1), object(12)\n",
      "memory usage: 381.8+ KB\n"
     ]
    }
   ],
   "source": [
    "#Check the changes\n",
    "rate_dogs.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 343,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Timestamp('2015-11-15 22:32:08'), Timestamp('2017-08-01 16:23:56'))"
      ]
     },
     "execution_count": 343,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Investigating the time of the tweets\n",
    "rate_dogs.timestamp.min(), rate_dogs.timestamp.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Set the index to the datatime \n",
    "rate_dogs = rate_dogs.set_index('timestamp')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p3_conf</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2327.000000</td>\n",
       "      <td>2327.000000</td>\n",
       "      <td>2327.000000</td>\n",
       "      <td>2057.000000</td>\n",
       "      <td>2057.000000</td>\n",
       "      <td>2.057000e+03</td>\n",
       "      <td>2.057000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>13.137946</td>\n",
       "      <td>2529.237645</td>\n",
       "      <td>7196.311560</td>\n",
       "      <td>1.204181</td>\n",
       "      <td>0.594190</td>\n",
       "      <td>1.348051e-01</td>\n",
       "      <td>6.042166e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>46.161371</td>\n",
       "      <td>4281.349538</td>\n",
       "      <td>11176.006039</td>\n",
       "      <td>0.563240</td>\n",
       "      <td>0.271175</td>\n",
       "      <td>1.007269e-01</td>\n",
       "      <td>5.100170e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.044333</td>\n",
       "      <td>1.011300e-08</td>\n",
       "      <td>1.740170e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>10.000000</td>\n",
       "      <td>511.500000</td>\n",
       "      <td>1250.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.363272</td>\n",
       "      <td>5.390140e-02</td>\n",
       "      <td>1.624560e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>11.000000</td>\n",
       "      <td>1178.000000</td>\n",
       "      <td>3114.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.587764</td>\n",
       "      <td>1.186470e-01</td>\n",
       "      <td>4.947150e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>12.000000</td>\n",
       "      <td>2925.500000</td>\n",
       "      <td>8780.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.843911</td>\n",
       "      <td>1.959500e-01</td>\n",
       "      <td>9.219820e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1776.000000</td>\n",
       "      <td>72461.000000</td>\n",
       "      <td>147735.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.880140e-01</td>\n",
       "      <td>2.734190e-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       rating_numerator  retweet_count  favorite_count      img_num  \\\n",
       "count       2327.000000    2327.000000     2327.000000  2057.000000   \n",
       "mean          13.137946    2529.237645     7196.311560     1.204181   \n",
       "std           46.161371    4281.349538    11176.006039     0.563240   \n",
       "min            0.000000       1.000000        0.000000     1.000000   \n",
       "25%           10.000000     511.500000     1250.000000     1.000000   \n",
       "50%           11.000000    1178.000000     3114.000000     1.000000   \n",
       "75%           12.000000    2925.500000     8780.500000     1.000000   \n",
       "max         1776.000000   72461.000000   147735.000000     4.000000   \n",
       "\n",
       "           p1_conf       p2_conf       p3_conf  \n",
       "count  2057.000000  2.057000e+03  2.057000e+03  \n",
       "mean      0.594190  1.348051e-01  6.042166e-02  \n",
       "std       0.271175  1.007269e-01  5.100170e-02  \n",
       "min       0.044333  1.011300e-08  1.740170e-10  \n",
       "25%       0.363272  5.390140e-02  1.624560e-02  \n",
       "50%       0.587764  1.186470e-01  4.947150e-02  \n",
       "75%       0.843911  1.959500e-01  9.219820e-02  \n",
       "max       1.000000  4.880140e-01  2.734190e-01  "
      ]
     },
     "execution_count": 345,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Look for informations\n",
    "rate_dogs.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 346,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.038820882957729"
      ]
     },
     "execution_count": 346,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rate_dogs.favorite_count.max()/rate_dogs.retweet_count.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 347,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p3_conf</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>rating_numerator</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.003956</td>\n",
       "      <td>0.005037</td>\n",
       "      <td>-0.000433</td>\n",
       "      <td>-0.009086</td>\n",
       "      <td>-0.020470</td>\n",
       "      <td>-0.003942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>retweet_count</th>\n",
       "      <td>0.003956</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.801326</td>\n",
       "      <td>0.105786</td>\n",
       "      <td>0.044092</td>\n",
       "      <td>-0.004875</td>\n",
       "      <td>-0.031954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>favorite_count</th>\n",
       "      <td>0.005037</td>\n",
       "      <td>0.801326</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.125150</td>\n",
       "      <td>0.067568</td>\n",
       "      <td>-0.018104</td>\n",
       "      <td>-0.047035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>img_num</th>\n",
       "      <td>-0.000433</td>\n",
       "      <td>0.105786</td>\n",
       "      <td>0.125150</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.204175</td>\n",
       "      <td>-0.160526</td>\n",
       "      <td>-0.139438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p1_conf</th>\n",
       "      <td>-0.009086</td>\n",
       "      <td>0.044092</td>\n",
       "      <td>0.067568</td>\n",
       "      <td>0.204175</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.512065</td>\n",
       "      <td>-0.709041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p2_conf</th>\n",
       "      <td>-0.020470</td>\n",
       "      <td>-0.004875</td>\n",
       "      <td>-0.018104</td>\n",
       "      <td>-0.160526</td>\n",
       "      <td>-0.512065</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.480353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p3_conf</th>\n",
       "      <td>-0.003942</td>\n",
       "      <td>-0.031954</td>\n",
       "      <td>-0.047035</td>\n",
       "      <td>-0.139438</td>\n",
       "      <td>-0.709041</td>\n",
       "      <td>0.480353</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  rating_numerator  retweet_count  favorite_count   img_num  \\\n",
       "rating_numerator          1.000000       0.003956        0.005037 -0.000433   \n",
       "retweet_count             0.003956       1.000000        0.801326  0.105786   \n",
       "favorite_count            0.005037       0.801326        1.000000  0.125150   \n",
       "img_num                  -0.000433       0.105786        0.125150  1.000000   \n",
       "p1_conf                  -0.009086       0.044092        0.067568  0.204175   \n",
       "p2_conf                  -0.020470      -0.004875       -0.018104 -0.160526   \n",
       "p3_conf                  -0.003942      -0.031954       -0.047035 -0.139438   \n",
       "\n",
       "                   p1_conf   p2_conf   p3_conf  \n",
       "rating_numerator -0.009086 -0.020470 -0.003942  \n",
       "retweet_count     0.044092 -0.004875 -0.031954  \n",
       "favorite_count    0.067568 -0.018104 -0.047035  \n",
       "img_num           0.204175 -0.160526 -0.139438  \n",
       "p1_conf           1.000000 -0.512065 -0.709041  \n",
       "p2_conf          -0.512065  1.000000  0.480353  \n",
       "p3_conf          -0.709041  0.480353  1.000000  "
      ]
     },
     "execution_count": 347,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#See if there is any correlations\n",
    "rate_dogs.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 348,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAsYAAALFCAYAAADA/CUbAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAEAAElEQVR4nOzdd3gc1bn48e+ZmS3qlmXJki3LsmzjSjem2EASmmkB0gikQEKAe3+54abdJOQmISQkQG56bpILBBJSCJBKs4EACTVATHfHluUqq1l1tW1mzu+P2V1Ltmyr7Gql1ft5Hj2WxjszR9qzO++eec97lNYaIYQQQgghJjoj2w0QQgghhBBiLJDAWAghhBBCCCQwFkIIIYQQApDAWAghhBBCCEACYyGEEEIIIQAJjPtZsWKFBuRLvkb6lRbSH+UrDV9pIX1RvtL0NWLSF+UrTV8HJYFxH62trdlughAp0h/FWCF9UYwV0hdFpklgLIQQQgghBBIYCyGEEEIIAYCV7QYIIdLHdTUNbSGau6NUFAWoLSvAMFS2myUmKOmPQowuec2NnATGQuQI19U8unYPN69cT9R2CVgG15+3gBWLKuWNUYw66Y9CjC55zaWHpFIIkSMa2kKpN0SAqO1y88r1NLSFstwyMRFJfxRidMlrLj0kMB6imO3SFYlnuxlCHKC5O5p6Q0yK2i7N3dEstUhMZNIfhRhd8ppLDwmMh+jGh9Zy1Ncfz3YzhDhARVGAgNX/JR2wDCqKAllqkZjIpD8KMbrkNZceEhgPUWNnJNtNEGJAtWUFXH/egtQbYzK/rLasIMstExOR9EchRpe85tJDJt8Nkd+UzxJibDIMxYpFlcyvLJIZySLrpD8KMbrkNZceEhgPkd+SwFiMXYahqCsvpK68MNtNEUL6oxCjTF5zIydR3hBJYCyEEEIIkZskyhui/RPbhRBCCCFEbpAob4gClpntJgghhBBCiAyQwHiIJJVCCCGEECI3SZQ3RBIYCyGEEELkJonyhkhyjIUQQgghcpNEeUNkJuoB2o57mEcKIYQQQojxRALjIdLa+zdiS2AshBBCCJFLJDAeIjcRGYdjTpZbIoQQQggh0kkC4yHSicA4EpfAWAghhBAil0hgPETJ1GIJjIUQQgghcosExkPkpkaMJcdYCCGEECKXSGA8RKkcYxkxFkIIIYTIKRIYD5EExkIIIYQQuUkC4yFyExkUcSnXJoQQQgiRU8ZcYKyUuksp1ayUWtNn29eVUruUUq8nvs7r83/XK6U2K6U2KqXO6bP9eKXUW4n/+7FSSqWjfU5ixDg5ciyEEEIIIXLDmAuMgV8BKwbY/gOt9TGJr5UASqmFwAeBRYl9fqaUMhOP/zlwDTA38TXQMYfMTQXG6TiaEEIIIYQYK8ZcYKy1fgbYO8iHXwTcq7WOaq23ApuBpUqpKqBYa/1P7RUe/jVwcXral2pnOg4nhBBCCCHGiDEXGB/Cfyil3kykWpQmtk0HdvR5zM7EtumJ7/fffgCl1DVKqdVKqdUtLS2HbYTjyoixyJyh9kchMkX6ohgrpC+K0TReAuOfA7OBY4BG4HuJ7QPlDetDbD9wo9a3a62XaK2XlJeXH7YhWnKMRQYNtT8KkSnSF8VYIX1RjKZxERhrrZu01o7W2gXuAJYm/msnMKPPQ6uB3Ynt1QNsH7HkSLEExkIIIYQQuWVcBMaJnOGkS4BkxYoHgQ8qpQJKqVl4k+xe1lo3At1KqZMS1Sg+CjyQjrYkUykkLhZCCCGEyC1WthuwP6XU74F3AFOUUjuBG4B3KKWOwUuHaACuBdBar1VK3Q+sA2zgk1rr5Mob/45X4SIPWJX4GjFXUimEEEIIIXLSmAuMtdaXDbD5zkM8/lvAtwbYvhpYnMamAVKuTQghhBAiV42LVIqxRHKMhRBCCCFykwTGQ5QMiKWOsRBCCCFEbpHAeIgcV2MaSlIphBBCCCFyTMYCY6WUqZT6TKaOny1akwiMJTIWQgghhMglGQuME9UhLsrU8bPF1RpTyYixEEIIIUSuyXRViueVUv8L3AeEkhu11q9m+LwZ42qNaUiOsRBCCCFErsl0YHxK4t9v9NmmgXdl+LwZ42owlMKVIWMhhBBCiJyS0cBYa/3OTB4/G1yZfCeEEEIIkZMyWpVCKVWilPq+Ump14ut7SqmSTJ4z07xUCpl8J4QQQgiRazJdru0uoBv4QOKrC/hlhs+ZUW6iKoXExUIIIYQQuSXTOcaztdbv7fPzjUqp1zN8zoxytfZyjCUyFkIIIYTIKZkeMQ4rpZYnf1BKLQPCGT5nRrmpOsbZbokQQgghhEinTI8Y/xvw6z55xe3AFRk+Z0a5rowYCyGEEELkokwHxl1a66OVUsUAWusupdSsDJ8zo1ytsQwp1yaEEEIIkWsynUrxJ/ACYq11V2LbHzN8zozaV5Ui2y0RQgghhBDplJERY6XUfGARUKKUek+f/yoGgpk452hJLfAhqRRCCCGEEDklU6kU84ALgEnAhX22dwNXZ+ico0LqGAshhBBC5KaMBMZa6weAB5RSJ2ut/5mJc2SL1mBIYCyEEEIIkXMyPfnuNaXUJ/HSKlIpFFrrj2f4vBnjuBpTgetmuyVCCCGEECKdMj357jdAJXAO8DRQjZdOMW55qRSGjBgLIYQQQuSYTAfGc7TWXwVCWuu7gfOBIzN8zozSGkwDqUohhBBCCJFjMh0YxxP/diilFgMlQG2Gz5lRsiS0EEIIIURuynSO8e1KqVLgK8CDQCHw1QyfM6OkKoUQQgghRG7KWGCslDLwVr5rB54B6jJ1rtHkumAqhZbAWAghhBAip2QslUJr7QL/kanjZ4urNYahcCQuFkIIIYTIKZnOMf6bUurzSqkZSqnJya8MnzOjXK2xDIWW2XdCCCGEEDkl0znGyXrFn+yzTTOO0yr2LfCR7ZYIIYQQQoh0ymhgrLWelcnjZ4OrNaZUpRBCCCGEyDkZTaVQSuUrpb6ilLo98fNcpdQFmTxnprmyJLQQQgghRE7KdI7xL4EYcEri553ATRk+Z0Z5I8aywIcQQgghRK7JdGA8W2v9HRILfWitw4DK8DkzSpaEFkIIIYTITZkOjGNKqTy8CXcopWYD0QyfM6P2LQktgbEQQgghRC7JdGB8A/AoMEMp9TvgSeALh9pBKXWXUqpZKbWmz7bJSqm/KaXeTvxb2uf/rldKbVZKbVRKndNn+/FKqbcS//djpVRaRqqTS0JrNx1HE0IIIYQQY0VGA2Ot9d+A9wBXAr8Hlmit/3GY3X4FrNhv25eAJ7XWc/GC6y8BKKUWAh8EFiX2+ZlSykzs83PgGmBu4mv/Yw6LN2Isk++EEEIIIXJNpkeMAaYDJuAHTlNKvedQD9ZaPwPs3W/zRcDdie/vBi7us/1erXVUa70V2AwsVUpVAcVa639qb+3mX/fZZ0QcV2MaCkcCYyGEEEKInJLROsZKqbuAo4C1QDL5QAN/HuKhpmqtGwG01o1KqYrE9unAi30etzOxLZ74fv/tA7XxGryRZWpqag7bkOTKd1KVQmTCkPujq2loC9HcHaWiKEBtWQGGMa7nt4oxYqh9sS/plyKdRtIXhRiqTK98d5LWemEGjz/QO60+xPYDN2p9O3A7wJIlSw4b7mqpYywyaCj90XU1j67dw80r1xO1XQKWwfXnLWDFokoJQsSIDfW9MUn6pUi34fZFIYYj06kU/0zkAY9UUyI9gsS/zYntO4EZfR5XDexObK8eYPuIJVe+0xIYiyxraAulgg+AqO1y88r1NLSFstwyMZFJvxRCjGeZDozvxguONyql3kxUiXhzGMd5ELgi8f0VwAN9tn9QKRVQSs3Cm2T3ciLtolspdVKiGsVH++wzIprEiLFUpRBZ1twdTQUfSVHbpbl7XFdEFOOc9EshxHiW6VSKu4CPAG+xL8f4kJRSvwfeAUxRSu3EK/l2C3C/UuoqYDvwfgCt9Vql1P3AOsAGPqm1dhKH+ne8Chd5wKrE14glR4wllUJkW0VRgIBl9AtCApZBRVEgi60SE530SyHEeJbpwHi71vrBoeygtb7sIP91xkEe/y3gWwNsXw0sHsq5B8N1k+Xa0n1kIYamtqyA689bcEAuZ21ZQbabJiYw6ZdCiPEs04HxBqXUPcBD9FnxTms91KoUY4a3JLSMGIvsMwzFikWVzK8sktn/YsyQfimEGM8yHRjn4QXEZ/fZNpxybWOG1kgqhRgzDENRV15IXXlhtpsiRIr0SyHEeJXRwFhr/bFMHj8bXK0xDIXExUIIIYQQuSXTC3z8kgHqB2utP57J82aStyQ0MmIshBBCCJFjMp1K8XCf74PAJaSpnnC2OFpjKJl8J4QQQgiRazKdSvGnvj8nSrE9kclzZlJyUQ+ZfCeEEEIIkXsyvcDH/uYC43ahc1eDoUApyTEWQgghhMg1mc4x7sbLMVaJf/cAX8zkOTPJ1RqlFAbgSi6FEEIIIUROyXQqRVEmjz/aXK1lxFgIIYQQIkdlevIdSqnpwMy+59JaP5Pp82aC63pBsVJSlUIIIYQQItdkOpXiVuBSYB3gJDZrYFwGxo7WmMrLM5bAWAghhBAit2R6xPhiYJ7WOnq4B44HjuuValNSrk0IIYQQIudkuipFPeDL8DlGjet6q94p9pVuE0IIIYQQuSHTI8a9wOtKqSeB1Kix1vq6DJ83I5KLe8iIsRBCCCFE7sl0YPxg4isnuK5XlcJQXpAshBBCCCFyR6bLtd19qP9XSv1Ja/3eTLYhnRydSKVQSlIphBBCCCFyzGivfLe/uiyff0iSk++8qhTZbo0QQgghhEinbAfG4yq8dF0wUznG46rpQgghhBDiMDK+wEcu8ZaE9j5NSFwsxgrX1TS0hWjujlJRFKC2rADDUNlulhDSN4UQ4062A+Nx9Q7ZvyqFRMYi+1xX8+jaPdy8cj1R2yVgGVx/3gJWLKqUAERklfRNIcR4lO1Uii9m+fxD4tUxRpaEFmNGQ1soFXgARG2Xm1eup6EtlOWWiYlO+qYQYjzK9JLQb3FgHnEnsBq4SWv9eCbPn27JEWNDSSqFGBuau6OpwCMpars0d0epKy/MUquEkL4phBifMp1KsQpwgHsSP38w8W8X8CvgwgyfP636LwktkbHIvoqiAAHL6BeABCyDiqJAFlslhPRNIcT4lOlUimVa6+u11m8lvv4beIfW+lagNsPnTjvX9Rb38JaEznZrhIDasgKuP28BAct7KSfzOGvLCrLcMjHRSd8UQoxHmR4xLlRKnai1fglAKbUUSN5DszN87rTru8CHjBiLscAwFCsWVTK/skhm/osxRfqmEGI8ynRg/AngLqVUId5AaxfwCaVUAXBzhs+ddrLAhxiLDENRV14oeZtizJG+KYQYbzK9JPS/gCOVUiWA0lp39Pnv+zN57kxw+5RrkyWhhRBCCCFyS6arUgSA9+LlE1tKebfQtNbfyOR5M8UbMU6Wa8t2a4QQQgghRDplOpXiAbzybK8A0QyfK+PcZCoFkmMshBBCCJFrMh0YV2utV2T4HKPGq2PsjRhLXCyEEEIIkVsyXa7tBaXUkRk+x6hxNYkcY1n5TgghhBAi12R6xHg5cKVSaiteKoVXAljrozJ83oxIpVIoJSPGQgghhBA5JtOB8bnpPJhSqgHoxltNz9ZaL1FKTQbuw5vg1wB8QGvdnnj89cBVicdfp7V+bCTnd1yNSqRSOBIZCyGEEELklIykUiilihPfdh/kayTeqbU+Rmu9JPHzl4AntdZzgScTP6OUWoi3BPUiYAXwM6WUOZITJxf4MJXClbIUQgghhBA5JVMjxvcAF+BVo9B4KRRJGqhL47kuAt6R+P5u4B/AFxPb79VaR4GtSqnNwFLgn8M9kZso12YYCkcCYyGEEEKInJKRwFhrfUHi31npPjTwuFJKA7dprW8HpmqtGxPna1RKVSQeOx14sc++OxPb+lFKXQNcA1BTU3PIkzt6X44xJAJlWd5UpNFQ+qMQmSR9UYwV0hfFaMpoVQql1JOD2TYEy7TWx+HlLn9SKXXaoU4/wLYDhnm11rdrrZdorZeUl5cf8uTJJaEBTENhy6ixSLOh9EchMkn6ohgrpC+K0ZSREWOlVBDIB6YopUrZF6QWA9OGe1yt9e7Ev81Kqb/gpUY0KaWqEqPFVUBz4uE7gRl9dq8Gdg/33JBcEtr73pR0CiGEEEKInJKpEeNr8fKL5yf+TX49APx0OAdUShUopYqS3wNnA2uAB4ErEg+7InEOEts/qJQKKKVmAXOBl4f12yQ4Lqh+I8buSA4nxIi5rqa+pYcX69uob+kZ1KTQ4ewjxGClq39JPxVjgfTDiSdTOcY/An6klPqU1vonaTrsVOAvicDUAu7RWj+qlPoXcL9S6ipgO/D+RBvWKqXuB9YBNvBJrbUzkgZ4OcXe9zJiLLLNdTWPrt3DzSvXE7VdApbB9ectYMWiyoPmvg9nHyEGK139S/qpGAukH05MGa1jrLX+iVJqMbAQCPbZ/uthHKseOHqA7W3AGQfZ51vAt4Z6roNxtMZIZIWYSnKMRXY1tIVSb9gAUdvl5pXrmV9ZRF15Ydr2EWKw0tW/pJ+KsUD64cSU6cl3NwA/SXy9E/gO8O5MnjOTXC0jxmLsaO6Opt6wk6K2S3N3NK37CDFY6epf0k/FWCD9cGLKaGAMvA9vNHeP1vpjeCO+gQyfM2NcV6MSI8aGVKUQWVZRFCBg9X8JByyDiqKDv8SGs48Qg5Wu/iX9VIwF0g8npkwHxhGttQvYidXwmknv4h6jynH3q0rhSGAssqe2rIDrz1uQeuNO5r/VlhWkdR8hBitd/Uv6qRgLpB9OTBnLMVbeLLk3lVKTgDvwqlL0MMLKENnk6D5VKZRUpRDZZRiKFYsqmV9ZRHN3lIqiALVlBYecFDKcfYQYrHT1L+mnYiyQfjgxZSww1lprpdQxWusO4P+UUo8CxVrrNzN1zkxz91vgQ3KMRbYZhqKuvHBIE0GGs48Qg5Wu/iX9VIwF0g8nnkynUryolDoBQGvdMJ6DYkguCe19LyvfCSGEEELkloyWa8OrRHGtUmobEMJbAU9rrY/K8Hkzou+S0IZCRoyFEEIIIXJIpgPjczN8/FHluholI8ZCCCGEEDkp0wt8bMvk8Uebl0qxb/KdI5PvhBBCCCFyRqZzjHOKN2Lcp46xlGsTQgghhMgZEhgPgb1/HWNJpRBCCCGEyBkSGA+B4+pU/UKvjrEExkIIIYQQuUIC4yFwNfuqUsiIsRBCCCFETpHAeAjcvnWMFTJiLIQQQgiRQyQwHgLHdfcbMZaqFEIIIYQQuSLTdYxziuOSGjE2JMdYjCGuq2loC9HcHaWiKEBtWUEqH16IbJA+KcTokNdaeklgPASOq7Esb5DdlHJtYoxwXc2ja/dw88r1RG2XgGVw/XkLWLGoUt4cRVZInxRidMhrLf0klWIInL51jGXEWIwBrqt5c2cH33hoLb0xB4Co7XLzyvU0tIWy3DoxUW1tDXHTw+voido4rpY+KUSGNLSFUkExyPt/OkhgPASO1hiJv5gpOcYiy5IjBX9b10Rzd5TOcJyY7RJzXHpjDs1dkWw3UUxArqtZs7uTPV0RuiM2kbhDJO5InxRiBFxXU9/Sw4v1bdS39OAmBuaau6OpoDgpars0d0ez0cycIKkUQ+C4+5aENqQqhciy5EjBu4+eRp7PBKAjHEcpCFoG4biD26f2thCjoaEtxJbmnlSfDCXuZOT5pE8KMRyHSpeoKAoQsIx+wXHAMqgoCmSxxeObBMZD4PYJjE0ldYxFdjV3RykMWJTmW/zg0mNo7AzT3BXlwTd28Z7jqvnhE5uYWVZAXXlhtpsqJpC2UAzLUHzrksXEbc2W1h4cR1NW6Jc+KXJapibBHSxdYn5lEbVlBVx/3oIDgubasoKst3u8ksB4CJw+dYwNmXwnsmxqcYBLjptGR9jmu79/jajtMrnAz3VnzOGxNXto7IzS3B2VIESMGtfV7Grv5Y+v7OCiY6q549l6LNPAbyquXFZLzNbSJ0VOyuQkuEOlS9SVF7JiUSXzK4uGFdjK5L0DSY7xEPRPpZARY5FdrgsdvTZ3PLuVuOMS9JmE4w7/+9RmTqork9tpYtQ1tIX43uObOPfIadz5XD1KKVytsV3NbU/Xc+aCCumTIidlchJcMl2ir77v74ahqCsv5KS6MurKC4cU0A633QfLec4FEhgPgTdiLDnGYmxo6Ymmgo5kUNwbc2gNxSgrDPC1CxcO6XaaECOVHNkKWgZKqVSf7InaoOCIxK1fIXJNuibBDRRwJtMlksHxcNIl0tnu5CjzFXe9zHW/f40r7nqZR9fuyZngWFIphkDvl0ohVSlENlUUBfCbBsVBC59p8IETZqDw8t87wzFOqiubsLfCRHYkR7bmVhZy2dIaXO1dKB9+s5HuSJzq0nzpkyInpWMS3KHSGkaSLpHudh8q5zmZJjWe85YlMB4Cb+W7fZPvZMRYZFNtWQHzqwr5wjnz2NUR5o5ntxK1XUrzfVx5Si1bW3tQyntcsoRWY2eEqpIgi6eVpBarESJdakrzuf68ebR0x/jTqztp740TsAyuPnUWeT6T7mgcGPiiCYzbC6kQ6ZgEd7iAM/mVzqBzOO0+XM6zF+A3ctPD6wnHHfJ8Jl+5YAErFlWl2jmWA2cJjIcg7riYiSdOJt+JbDMMRWVJHsVBh+88thHTUOT5TLrCcX7+9Ba+dfFirrjrZb524QLaQnFufHBt6o3vhgsX8b7jqiU4FmnjuprH1zexqz3CL57dSlfEJt9vojX87qXtfPikGizDGHBU7GsXLiTuuNy8coNMABLjkmGoEY/qHi7ghPRPlhtOuw83yry1NcTXH1xHa4+XjtEZjvP1B9cxb2oxsysKx/yEP7kqDkE45hD0JZaEVgpbUilElikUq7ftJe5owjGHcNzB0eAzDba39RK1Xd7Y0cl3Vm3oNwpx40NrWbO7M8utF7kkOdoV9Jm0hmJeLe1En+wIx5kxuYCqkuCAo2Jv7ujgpodl9S4xvo1kEhwcOMnOm/Dv1aVP5u9mYpKfYShqywqoKArQ3B2loS10yHzhw+U8N7SFUkFxUmtPlG17Qxn7HdJJRoyHIBSzCSSK1huGpFKI7HJdTXNnmNqyQkBTGLRAe33TZyriif4ZdzSRAUYhGjsjHDP6zRY5KjnaVRiwyPMZGEpRFLTQGoI+gykFfmZMymf19vYDRsXiriYcd/CZ+4KC/UfKhMh1fdMauiI2MdvhmtPquOHBNVx7+hxWLKo8YFS5rMDPO+dXsHFPd+oYQw3IhzqCe7hR5ny/OeCIcjARPx1sZLwtFAN6sp5eIYHxEPTGHIKW98SaSlIpRHY1tIWIuZpH39jFl89bwP88tpFI3AXX5QvnLOSRN3cD4DMVQcsgEndS+wYsg6qSYLaaLnJQcrQrP2DwlfMX8r3HNxKKOfhNgw+dWMPbzd0UBi2ClkFVSYDGzn0jSn7TIM9n9htskHKDYqJJBpzTSoL8bV0TGnh8bRNtoRg3r1zPgqoigpbB+4+vBuC17e2cMGsytz9TT77fIt9vDislYTCT6QZqazLneX+VJUGuPX02tz29JRVoX3v67NQ1J/le0RtzcBPVvqpLg+xq7+Wz972e9fQKCYyHoF8qhYHUMRZZ1dwdpbrUz1WnzyYUtbnp4sUUBCwCpsIwFFedOouAZdIdifPTDx1HKBon3++jMxzDb5nEHZe39+ylqduhJxKnKM9HW0+MiqIAUwpNmrptWntiTC0K4LcMOnrj9MYcKooDaK3Z0+V9qne0Q9Dy0ROJE4o5lBX4ibkuRQEf3ZE4PtOgsiTIzMmHnwS4/4SMmtJ8trf3pn6uLslj3Z6ufvsbhjrkPukYdUi2qy0Uw2d4ZcimFgdHdURjLE9WAW+k6t6rj6EnCiVBl69dsJDCPB+T8rzLTHfEpidqE427fOX8BTguNCV+l7jrsqCqiOI8Hz0Rm6KgRUc4RlNXhHAsRlvIob03RkWRn8KASVfEoTMcpyTPh6s13RGbgkRgYBrQFbZRSpPv99EdsemNOUwp9OO3DCJxl3y/SVeib1ZNCuI4XvnD8sIApgm7OyJE4g6T8/0oQxONa1p7okyblEdx0EdTV4TCgEko5hKK2tSWedU2mroOfG4G87wN9bl1Xc3W1hANbSHy/Wa/3+FQ+6ejD431fpgOyd+xqSuCaSjaQzHKiwLYrqapK8qUQj+26xAwvQ9ze0NxioIWBQGTSNxLHwpYFjHbpiTfTyhi0xN1KC3wYShFwGcQibk0dUeoKApQnGfSHfZ+rioOYrsucVdTFDB5//HVTMr3URz0sbsjzMtb9+Jozevb2/n48jpau6N88+LF3P/ydtp642xu7mYVmqBlUuA30YCtNfmJEdyWxHt80GfQ3BUlP2DREYoRsAzOO7ISjcJQ8NT6Jjbs6eaNHR1UlgSxTEVLd5TSfD+9MRtf4sNsxHbojtgELJPioEU08fPyOWUsmVlKWyhGeaG3T0tXhN0dYbrCNjdcuJCtrT30Rh1CMZfT503hlYZ2zj2yCkPBk+ua+PYj6w4ZnGdKzgfGSqkVwI8AE/iF1vqW4R4rHHf6pVLE+ozACTHapk0yMVHs6vBqGSsFJXkmhoLemKaiyE9zd4y4o4nGHXqiDqDY3d7LH17ZxceXz6K2LB8NFOf5WLOzk1VrGzl7USWT8vz84IlNFAV9fOiEaqZNLuD1HR24Ljz7dguXnVjD3p4oa3d3sXh6Me2hXn74xNteDVufwRUn1/KnV3dy4VHTeOiNXbzn+BksqZ3Ezr0RbnxoLcVBHxcePY1te3uZWhzAdTT5AYvGzjDrG7v527om/JbisqUz+enfN6dGEP7t9Nnc9vRmdnZEUpMIK0sCfPWv3sTCqpLAAfuMdNQheZvxtqc38455Fdz+TD3+xEVgtEY0xvpkFYCOaASAtpBLRzjG5AI/PVEbq8CkPWQTdzWFAQvL0GxuCRGJ2kwqCPB2cw81k/N5Ym0jaxt7+MzZ82jriVGS76crHMfVFvXNXWxvj1BVHKA43893H9tI1HaxTMXlS2t48I3dhGMOnz37CCbl+eiN2hQGLXqiEUJRl3DcZld7L9WT81jf2I1lKGZNKWRTczeLpxXzm39uY3OLl9/4/945m18+t5XWnhhTCv184rQ6bn5kPVFHUxK0+MjJM1m7s4PzjprGxqYeHNfljmc6uXRpDQ0tITRwZHUJZ8yfiutqHn5rN7es2kDc0QOO6A31uU3O+E9ObsrzmfzXinnc9/IO2hIBzkD7p6MPjYd+OBKuq9nS3MPmlm6CPosCv8J2IGK7RG0Xn6koyTNxXBfbgc7eGFOLA0wp9NMZ9iqwxBxN3NH4LU1Jnh9wKQpaWKZBeyhOcZ6FArrCcaqKg1iGoqkrRtR2mVGah89UdIY1i6YVM31SkLijae2JoQyF3zJYNruM9t44y+ZMoScSp668gIDP4D/OOIK9Ia89ActgV3uY4qBFb9ymO+JgFfiJOw6l+V5bwQcKLKUoybf43NlHUJznw3ZcLMNgUVUxpfk+wjHvDnnyjqOjNQV+i0jcoaUnSmHAojDoI89n4Dia9l6bKUV+YonUiKlFAW/dB0cDiqjtYCjI85tUl+YzKd/7sLCnK8pxM0sJ+gwaOyOcfkQ5NaUGW9t6JTBOJ6WUCfwUOAvYCfxLKfWg1nrdUI+ltU6kUvSZfCepFCKLTFxeqA+xrS2UKtU2pdDPF1fMo62zl6LCPKbkm+ztjfOFP71JJO5dyL507nwuXVLNT558my+dt4DmrjBRW1Na4Ocjp9SyaU8PP35yM+VFAd57XDUYJv957+uphRuuPrWOO57ZwlkLK7nnpe18YcV8fv/SNtp746m23f1CA+85rpo7n9vKZSfWcNvTW1g87dhUUPze46t58PVd+C2D6//8FqahsB2Xjy2bxcNv7OKS46rxmwY3PrSWfL+FaSh6ojbfeHgdl59Yw90vNKQmEX7r4sWpW4DL5pT322cwtwQPJ3mb8cKjp3H7M/VEExdJy1AjPvZQ2zCUW52jLRwO849N3fzf05u58Ojp3PncVm9UyW/wlfPm88vnt7J8bgUzywrY3tpFRUkh1//lrVS//NoFCzm6ppRP3/saPtMb3bpq+SyeWLuHD51cy4bGLhZPq+a//7rGSxlSkOczueu5rVy6tIZfPt/ANx5ax7cvOZI7n2vgymW17O4I8/On64kllkv/yEk1PPd2C8vnlvP1h9YSs11sV/OFFfNoeWk7uzsj3LxyAx89eSZ3PLuVyxZWctPD6zGUwm8q9vbG+fMrO/m3d87h+r+sIWp7o8//dfY8vvfYRvb2xtFac+3ps5k7tZCtLSGu//NbqefNdn0HPG9DfW4b2kLc9PD61OQmDdy8cgOXn1jDg6/vPuj+6ehD46EfDpfralataeSGB9eyNxSjelKQq0+bzc2rNhCOOeT5Tf77vAW42qGlO85tz9RTkufjg0tn8NiaPVx09DR64w6/eHYrUcelNM/HNafVMbMsn+buGD98YlPqLseHTqxh5VuNdEds/t8753Dns/Xs7IgwpdDPZ846gp//fTNFQR8fXFrDj57YxN5E2cNrT69jaqGP5p44//d0PT5Tkec3ue5dc7nt6S3s7IgQ9Hnv8c9ubGbBtBLueXk70bjL5AIfH19Wx/88tgHDMHC15prT6vCbil88510/tIb/Omcedz5bT3tvHFdrvnTuAmwnxM/+sRXTUFx5ykwicTf1Xjgp38fVp86ioijIt1euZ2pxkA+cMINbH91ANO4NlHzx3PkEDFizu4sHXtvFhcdM55fPe+8PftPgg0tncP/qnXRF4nxxxXweemMXm5p6uP7cBbzjiKJR7wu5XpViKbBZa12vtY4B9wIXDedAMcfFUGCZyVQKRVyqUogsatjrsHFPdyooBmjtifHdxzdx5MwyvvvYRgqCAW5dtcELJPAuZLes2kBB0M+Ziyp5dXsHBQE/rT0xtraGsO1kipDijAVT2RuK8eMn304dP2K73PFsPWcurMRUXuD54yff5vR5Fal29cYc4okR7KjtohLnbe+NE7Fdzjuqijuf28pZiyq587mtgHebPWK73PncVs5YWMntz9QztSRI1HZTi0S4et/xkiK2S09s350bV+t++yR/56GuPtVXcqJI8tj7n2skxx5qG/oarXMPVsNeh28+so4zF3rPa9R2U6kT3161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\n",
      "text/plain": [
       "<Figure size 720x720 with 20 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the correlations\n",
    "sns.pairplot(rate_dogs, \n",
    "             vars = ['rating_numerator', 'retweet_count', 'favorite_count', 'p1_conf'], \n",
    "             diag_kind = 'kde', plot_kws = {'alpha': 0.9});"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 349,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>text</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>stage</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>jpg_url</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p1_dog</th>\n",
       "      <th>p2</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p2_dog</th>\n",
       "      <th>p3</th>\n",
       "      <th>p3_conf</th>\n",
       "      <th>p3_dog</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-06-18 18:26:18</th>\n",
       "      <td>744234799360020481</td>\n",
       "      <td>Here's a doggo realizing you can stand in a po...</td>\n",
       "      <td>13</td>\n",
       "      <td>744234799360020481</td>\n",
       "      <td>NaN</td>\n",
       "      <td>doggo</td>\n",
       "      <td>72461.0</td>\n",
       "      <td>147735.0</td>\n",
       "      <td>https://pbs.twimg.com/ext_tw_video_thumb/74423...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>labrador_retriever</td>\n",
       "      <td>0.825333</td>\n",
       "      <td>True</td>\n",
       "      <td>ice_bear</td>\n",
       "      <td>0.044681</td>\n",
       "      <td>False</td>\n",
       "      <td>whippet</td>\n",
       "      <td>0.018442</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-21 18:26:02</th>\n",
       "      <td>822872901745569793</td>\n",
       "      <td>Here's a super supportive puppo participating ...</td>\n",
       "      <td>13</td>\n",
       "      <td>822872901745569793</td>\n",
       "      <td>NaN</td>\n",
       "      <td>puppo</td>\n",
       "      <td>40913.0</td>\n",
       "      <td>126557.0</td>\n",
       "      <td>https://pbs.twimg.com/media/C2tugXLXgAArJO4.jpg</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lakeland_terrier</td>\n",
       "      <td>0.196015</td>\n",
       "      <td>True</td>\n",
       "      <td>labrador_retriever</td>\n",
       "      <td>0.160329</td>\n",
       "      <td>True</td>\n",
       "      <td>irish_terrier</td>\n",
       "      <td>0.069126</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-12-09 06:17:20</th>\n",
       "      <td>807106840509214720</td>\n",
       "      <td>This is Stephan. He just wants to help. 13/10 ...</td>\n",
       "      <td>13</td>\n",
       "      <td>807106840509214720</td>\n",
       "      <td>Stephan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>52924.0</td>\n",
       "      <td>114143.0</td>\n",
       "      <td>https://pbs.twimg.com/ext_tw_video_thumb/80710...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>chihuahua</td>\n",
       "      <td>0.505370</td>\n",
       "      <td>True</td>\n",
       "      <td>pomeranian</td>\n",
       "      <td>0.120358</td>\n",
       "      <td>True</td>\n",
       "      <td>toy_terrier</td>\n",
       "      <td>0.077008</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               tweet_id  \\\n",
       "timestamp                                 \n",
       "2016-06-18 18:26:18  744234799360020481   \n",
       "2017-01-21 18:26:02  822872901745569793   \n",
       "2016-12-09 06:17:20  807106840509214720   \n",
       "\n",
       "                                                                  text  \\\n",
       "timestamp                                                                \n",
       "2016-06-18 18:26:18  Here's a doggo realizing you can stand in a po...   \n",
       "2017-01-21 18:26:02  Here's a super supportive puppo participating ...   \n",
       "2016-12-09 06:17:20  This is Stephan. He just wants to help. 13/10 ...   \n",
       "\n",
       "                     rating_numerator  rating_denominator     name  stage  \\\n",
       "timestamp                                                                   \n",
       "2016-06-18 18:26:18                13  744234799360020481      NaN  doggo   \n",
       "2017-01-21 18:26:02                13  822872901745569793      NaN  puppo   \n",
       "2016-12-09 06:17:20                13  807106840509214720  Stephan    NaN   \n",
       "\n",
       "                     retweet_count  favorite_count  \\\n",
       "timestamp                                            \n",
       "2016-06-18 18:26:18        72461.0        147735.0   \n",
       "2017-01-21 18:26:02        40913.0        126557.0   \n",
       "2016-12-09 06:17:20        52924.0        114143.0   \n",
       "\n",
       "                                                               jpg_url  \\\n",
       "timestamp                                                                \n",
       "2016-06-18 18:26:18  https://pbs.twimg.com/ext_tw_video_thumb/74423...   \n",
       "2017-01-21 18:26:02    https://pbs.twimg.com/media/C2tugXLXgAArJO4.jpg   \n",
       "2016-12-09 06:17:20  https://pbs.twimg.com/ext_tw_video_thumb/80710...   \n",
       "\n",
       "                     img_num                  p1   p1_conf p1_dog  \\\n",
       "timestamp                                                           \n",
       "2016-06-18 18:26:18      1.0  labrador_retriever  0.825333   True   \n",
       "2017-01-21 18:26:02      1.0    lakeland_terrier  0.196015   True   \n",
       "2016-12-09 06:17:20      1.0           chihuahua  0.505370   True   \n",
       "\n",
       "                                     p2   p2_conf p2_dog             p3  \\\n",
       "timestamp                                                                 \n",
       "2016-06-18 18:26:18            ice_bear  0.044681  False        whippet   \n",
       "2017-01-21 18:26:02  labrador_retriever  0.160329   True  irish_terrier   \n",
       "2016-12-09 06:17:20          pomeranian  0.120358   True    toy_terrier   \n",
       "\n",
       "                      p3_conf p3_dog  \n",
       "timestamp                             \n",
       "2016-06-18 18:26:18  0.018442   True  \n",
       "2017-01-21 18:26:02  0.069126   True  \n",
       "2016-12-09 06:17:20  0.077008   True  "
      ]
     },
     "execution_count": 349,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check the most favorited tweet\n",
    "rate_dogs.sort_values(by = 'favorite_count', ascending = False).head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 350,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>text</th>\n",
       "      <th>rating_numerator</th>\n",
       "      <th>rating_denominator</th>\n",
       "      <th>name</th>\n",
       "      <th>stage</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>favorite_count</th>\n",
       "      <th>jpg_url</th>\n",
       "      <th>img_num</th>\n",
       "      <th>p1</th>\n",
       "      <th>p1_conf</th>\n",
       "      <th>p1_dog</th>\n",
       "      <th>p2</th>\n",
       "      <th>p2_conf</th>\n",
       "      <th>p2_dog</th>\n",
       "      <th>p3</th>\n",
       "      <th>p3_conf</th>\n",
       "      <th>p3_dog</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-06-18 18:26:18</th>\n",
       "      <td>744234799360020481</td>\n",
       "      <td>Here's a doggo realizing you can stand in a po...</td>\n",
       "      <td>13</td>\n",
       "      <td>744234799360020481</td>\n",
       "      <td>NaN</td>\n",
       "      <td>doggo</td>\n",
       "      <td>72461.0</td>\n",
       "      <td>147735.0</td>\n",
       "      <td>https://pbs.twimg.com/ext_tw_video_thumb/74423...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>labrador_retriever</td>\n",
       "      <td>0.825333</td>\n",
       "      <td>True</td>\n",
       "      <td>ice_bear</td>\n",
       "      <td>0.044681</td>\n",
       "      <td>False</td>\n",
       "      <td>whippet</td>\n",
       "      <td>0.018442</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-06-04 23:31:25</th>\n",
       "      <td>739238157791694849</td>\n",
       "      <td>Here's a doggo blowing bubbles. It's downright...</td>\n",
       "      <td>13</td>\n",
       "      <td>739238157791694849</td>\n",
       "      <td>NaN</td>\n",
       "      <td>doggo</td>\n",
       "      <td>54100.0</td>\n",
       "      <td>109407.0</td>\n",
       "      <td>https://pbs.twimg.com/ext_tw_video_thumb/73923...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>eskimo_dog</td>\n",
       "      <td>0.503372</td>\n",
       "      <td>True</td>\n",
       "      <td>siberian_husky</td>\n",
       "      <td>0.390413</td>\n",
       "      <td>True</td>\n",
       "      <td>malamute</td>\n",
       "      <td>0.080901</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-12-09 06:17:20</th>\n",
       "      <td>807106840509214720</td>\n",
       "      <td>This is Stephan. He just wants to help. 13/10 ...</td>\n",
       "      <td>13</td>\n",
       "      <td>807106840509214720</td>\n",
       "      <td>Stephan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>52924.0</td>\n",
       "      <td>114143.0</td>\n",
       "      <td>https://pbs.twimg.com/ext_tw_video_thumb/80710...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>chihuahua</td>\n",
       "      <td>0.505370</td>\n",
       "      <td>True</td>\n",
       "      <td>pomeranian</td>\n",
       "      <td>0.120358</td>\n",
       "      <td>True</td>\n",
       "      <td>toy_terrier</td>\n",
       "      <td>0.077008</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               tweet_id  \\\n",
       "timestamp                                 \n",
       "2016-06-18 18:26:18  744234799360020481   \n",
       "2016-06-04 23:31:25  739238157791694849   \n",
       "2016-12-09 06:17:20  807106840509214720   \n",
       "\n",
       "                                                                  text  \\\n",
       "timestamp                                                                \n",
       "2016-06-18 18:26:18  Here's a doggo realizing you can stand in a po...   \n",
       "2016-06-04 23:31:25  Here's a doggo blowing bubbles. It's downright...   \n",
       "2016-12-09 06:17:20  This is Stephan. He just wants to help. 13/10 ...   \n",
       "\n",
       "                     rating_numerator  rating_denominator     name  stage  \\\n",
       "timestamp                                                                   \n",
       "2016-06-18 18:26:18                13  744234799360020481      NaN  doggo   \n",
       "2016-06-04 23:31:25                13  739238157791694849      NaN  doggo   \n",
       "2016-12-09 06:17:20                13  807106840509214720  Stephan    NaN   \n",
       "\n",
       "                     retweet_count  favorite_count  \\\n",
       "timestamp                                            \n",
       "2016-06-18 18:26:18        72461.0        147735.0   \n",
       "2016-06-04 23:31:25        54100.0        109407.0   \n",
       "2016-12-09 06:17:20        52924.0        114143.0   \n",
       "\n",
       "                                                               jpg_url  \\\n",
       "timestamp                                                                \n",
       "2016-06-18 18:26:18  https://pbs.twimg.com/ext_tw_video_thumb/74423...   \n",
       "2016-06-04 23:31:25  https://pbs.twimg.com/ext_tw_video_thumb/73923...   \n",
       "2016-12-09 06:17:20  https://pbs.twimg.com/ext_tw_video_thumb/80710...   \n",
       "\n",
       "                     img_num                  p1   p1_conf p1_dog  \\\n",
       "timestamp                                                           \n",
       "2016-06-18 18:26:18      1.0  labrador_retriever  0.825333   True   \n",
       "2016-06-04 23:31:25      1.0          eskimo_dog  0.503372   True   \n",
       "2016-12-09 06:17:20      1.0           chihuahua  0.505370   True   \n",
       "\n",
       "                                 p2   p2_conf p2_dog           p3   p3_conf  \\\n",
       "timestamp                                                                     \n",
       "2016-06-18 18:26:18        ice_bear  0.044681  False      whippet  0.018442   \n",
       "2016-06-04 23:31:25  siberian_husky  0.390413   True     malamute  0.080901   \n",
       "2016-12-09 06:17:20      pomeranian  0.120358   True  toy_terrier  0.077008   \n",
       "\n",
       "                    p3_dog  \n",
       "timestamp                   \n",
       "2016-06-18 18:26:18   True  \n",
       "2016-06-04 23:31:25   True  \n",
       "2016-12-09 06:17:20   True  "
      ]
     },
     "execution_count": 350,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check the most retweeted tweet\n",
    "rate_dogs.sort_values(by = 'retweet_count', ascending = False).head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 351,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pupper    254\n",
       "doggo      80\n",
       "puppo      30\n",
       "floof      10\n",
       "Name: stage, dtype: int64"
      ]
     },
     "execution_count": 351,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check fot the most common dogs stages\n",
    "rate_dogs.stage.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 352,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "golden_retriever      150\n",
       "labrador_retriever     96\n",
       "pembroke               88\n",
       "chihuahua              81\n",
       "pug                    57\n",
       "chow                   44\n",
       "samoyed                42\n",
       "pomeranian             38\n",
       "toy_poodle             38\n",
       "malamute               30\n",
       "Name: p1, dtype: int64"
      ]
     },
     "execution_count": 352,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for the most common dogs breeds \n",
    "rate_dogs.p1.value_counts().head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 353,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the most common dogs breeds \n",
    "plt.barh(rate_dogs.p1.value_counts().head(10).index, rate_dogs.p1.value_counts().head(10), color = 'g',  alpha=0.9)\n",
    "plt.xlabel('Number of tweets', fontsize = 10)\n",
    "plt.title('Top 10 dog breeds by tweet count', fontsize = 14)\n",
    "plt.gca().invert_yaxis()\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 354,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "p1\n",
       "golden_retriever      1505719.0\n",
       "labrador_retriever     929260.0\n",
       "pembroke               885048.0\n",
       "chihuahua              611060.0\n",
       "samoyed                456761.0\n",
       "french_bulldog         416623.0\n",
       "chow                   360800.0\n",
       "pug                    276984.0\n",
       "cocker_spaniel         273708.0\n",
       "pomeranian             269816.0\n",
       "Name: favorite_count, dtype: float64"
      ]
     },
     "execution_count": 354,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Group favorite count with dogs breeds and see what are the most favorites\n",
    "top10 = rate_dogs.favorite_count.groupby(rate_dogs['p1']).sum().sort_values(ascending = False)\n",
    "top10.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 355,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the most favorites dogs breeds \n",
    "plt.barh(top10.head(10).index, top10.head(10), color = 'g', alpha=0.9)\n",
    "plt.xlabel('Favorite count', fontsize = 10)\n",
    "plt.title('Top 10 favorite dog breeds', fontsize = 14)\n",
    "plt.gca().invert_yaxis()\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 356,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Average favorite counts by dogs stages')"
      ]
     },
     "execution_count": 356,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the most favorites dogs stages\n",
    "favorite_count_stages = rate_dogs.groupby('stage').favorite_count.mean().sort_values()\n",
    "favorite_count_stages.plot(x=\"stage\",y='favorite_count',kind='barh',color='g', alpha=0.9)\n",
    "plt.xlabel('Favorite count', fontsize = 10)\n",
    "plt.ylabel('Dogs stages', fontsize = 10)\n",
    "plt.title('Average favorite counts by dogs stages', fontsize = 14)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Insights:\n",
    "1.  The quantity of people who favorite the posts is 2.039 time higher than people that retweet the posts. This shows a preference of just favorite the posts than retweet.\n",
    "\n",
    "2. There are a strong correlation between the favorites counts and retweets. To be more precised the correlation is 0.801345.\n",
    "To evidenciate better, the most retweeted and favorited dog is a doggo labrador retriever who received 72474 retweets and 147742 favorites votes. His ID is 744234799360020481.\n",
    "\n",
    "3. The most common dogs breeds are golden retriever, labrador retriever and pembroke, respectively. They receive the most favorite counts too.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Visualizations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 357,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot a scatter plot to verify a possible trend in the amount os favorite count over time\n",
    "plt.scatter(rate_dogs.index, rate_dogs['favorite_count'])\n",
    "plt.title('Daily tweets by favorite count', fontsize = 14)\n",
    "plt.xlabel('Days', fontsize = 14)\n",
    "plt.ylabel('Favorite count', fontsize = 14)\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1152x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot a Word Cloud with the texts written\n",
    "\n",
    "tweets = np.array(rate_dogs.text)\n",
    "list1 = []\n",
    "for tweet in tweets:\n",
    "    list1.append(tweet.replace(\"\\n\",\"\"))\n",
    "    \n",
    "    \n",
    "    \n",
    "mask = np.array(Image.open(requests.get('https://img.favpng.com/23/21/16/dog-vector-graphics-bengal-cat-illustration-clip-art-png-favpng-RWmY6zWcLaCxWurMaPEpZpARA.jpg', stream=True).raw))\n",
    "text = list1\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def gen_wc(text, mask):\n",
    "    word_cloud = WordCloud(width = 700, height = 400, background_color='white', mask=mask).generate(str(text))\n",
    "    plt.figure(figsize=(16,10),facecolor = 'white', edgecolor='red')\n",
    "    plt.imshow(word_cloud)\n",
    "    plt.axis('off')\n",
    "    plt.tight_layout(pad=0)\n",
    "    plt.show()\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "gen_wc(text, mask)\n",
    "\n",
    "# The code used above was modeled from this blog on how to generate a word cloud in python.\n",
    "#https://blog.goodaudience.com/how-to-generate-a-word-cloud-of-any-shape-in-python-7bce27a55f6e"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Insights:\n",
    "\n",
    "1. We can have a visual look in the Daily tweets by favorite count chart and verify a positive trend in the amount of favorite tweets over time.\n",
    "\n",
    "2. In the cloud chart we can see that the word  pooper, dog, pup and meet are the most frequently written."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "extensions": {
   "jupyter_dashboards": {
    "activeView": "report_default",
    "version": 1,
    "views": {
     "grid_default": {
      "cellMargin": 10,
      "defaultCellHeight": 20,
      "maxColumns": 12,
      "name": "grid",
      "type": "grid"
     },
     "report_default": {
      "name": "report",
      "type": "report"
     }
    }
   }
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
